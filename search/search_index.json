{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfd9\ufe0f Extracting Building Heights from Google Open Buildings 2.5D Temporal Dataset\ud83d\ude80 Master Urban Analysis with Building Heights","text":"<p>Transform cities with data-driven insights using Google's revolutionary Open Buildings 2.5D Temporal dataset</p> \ud83d\udcd8 Get Started \ud83d\udef0\ufe0f Try Earth Engine"},{"location":"#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"\ud83d\ude80 \ud83d\ude80 Getting Started <ul> <li>\ud83d\udcd8 Introduction</li> <li>\ud83d\udcca Dataset Overview</li> </ul> \ud83d\udee0\ufe0f \ud83d\udee0\ufe0f Extraction Methods <ul> <li>\ud83d\udef0\ufe0f Google Earth Engine</li> <li>\ud83d\udc0d Python Direct Download</li> <li>\ud83c\udf10 Web Explorer</li> </ul> \ud83c\udfa8 \ud83c\udfa8 Visualization <ul> <li>\ud83d\uddfa\ufe0f Working with QGIS</li> <li>\ud83d\udcca Advanced Visualization</li> </ul> \ud83c\udfd7\ufe0f \ud83c\udfd7\ufe0f Applications <ul> <li>\ud83c\udf06 Real-World Applications</li> <li>\ud83d\udee0\ufe0f Troubleshooting &amp; Tips</li> </ul> \ud83d\udcda \ud83d\udcda Resources <ul> <li>\ud83d\udd17 Additional Resources</li> <li>\u2705 Conclusion</li> </ul>"},{"location":"#key-features-highlights","title":"\ud83c\udf1f Key Features &amp; Highlights","text":"\ud83c\udf0d Global Coverage <p>Access building height data across 58+ million km\u00b2 covering Africa, South Asia, Southeast Asia, Latin America, and the Caribbean with 8 years of temporal analysis (2016-2023).</p> \ud83c\udfaf Multiple Methods <p>Choose from three powerful extraction approaches: Google Earth Engine for large-scale processing, Python for automation, or Web Explorer for quick visualization and exploration.</p> \ud83c\udfa8 Advanced Visualization <p>Create stunning 2.5D and 3D visualizations in QGIS, generate interactive web maps, and build comprehensive analytics dashboards with modern styling and animations.</p> \ud83c\udfd7\ufe0f Real-World Applications <p>Apply your skills to urban planning, emergency response, climate studies, smart city development, and real estate analysis with comprehensive case studies and examples.</p>"},{"location":"#quick-start-guide","title":"\ud83d\ude80 Quick Start Guide","text":"'); background-size: 20px 20px; opacity: 0.3;\"&gt; \u26a1 Get Started in 3 Steps 1\ufe0f\u20e3 Choose Your Method <p>Select from Earth Engine, Python, or Web Explorer based on your needs and technical expertise.</p> 2\ufe0f\u20e3 Extract Data <p>Follow our step-by-step guides to extract building heights for your area of interest with optimized settings.</p> 3\ufe0f\u20e3 Visualize &amp; Analyze <p>Create stunning visualizations in QGIS and apply your insights to real-world urban analysis challenges.</p>"},{"location":"#perfect-for","title":"\ud83c\udfaf Perfect For","text":"\ud83d\udc77 Urban Planners <p>Analyze building density, plan infrastructure, conduct shadow studies, and support data-driven zoning decisions with accurate height information.</p> \ud83d\udd2c Researchers <p>Study urban growth patterns, climate impacts, informal settlements, and contribute to sustainable development research with global building data.</p> \ud83d\udea8 Emergency Managers <p>Plan evacuation routes, assess flood vulnerability, optimize emergency communication networks, and enhance disaster preparedness strategies.</p> \ud83d\udcbc GIS Professionals <p>Expand your technical skills with cutting-edge datasets, master advanced visualization techniques, and add building height analysis to your expertise.</p>"},{"location":"#dataset-statistics","title":"\ud83d\udcca Dataset Statistics\ud83c\udf1f Ready to Transform Urban Analysis?","text":"Metric Value Coverage \ud83c\udf0d Geographic Coverage ~58 million km\u00b2 Global South regions \u23f0 Temporal Range 2016-2023 8 years of data \ud83d\udccf Spatial Resolution 4m effective (0.5m provided) High detail analysis \ud83c\udfd7\ufe0f Height Range 0-100 meters Complete building spectrum \ud83d\udcc8 Data Quality \u00b13.5m accuracy (MAE) Research-grade precision <p>Join thousands of professionals already using building height data to create smarter, more resilient cities.</p> \ud83d\udcda Start Learning \ud83d\ude80 Try Now"},{"location":"advanced-viz/","title":"\ud83d\udcca Advanced Visualization Techniques","text":"\ud83c\udfa8 Push the Boundaries of Building Height Visualization <p>Create stunning, professional-grade visualizations that tell compelling urban stories</p>"},{"location":"advanced-viz/#advanced-isometric-building-views","title":"\ud83c\udfd7\ufe0f Advanced Isometric Building Views","text":""},{"location":"advanced-viz/#enhanced-3d-perspective-rendering","title":"\u2728 Enhanced 3D Perspective Rendering","text":"#### \ud83c\udfaf **Custom Geometry Generator**  <pre><code># \ud83c\udfe2 Advanced QGIS Python script for isometric buildings\nlayer = iface.activeLayer()\n\n# \ud83c\udfa8 Create sophisticated 2.5D renderer\nrenderer = QgsRuleBasedRenderer(QgsSymbol.defaultSymbol(layer.geometryType()))\nroot_rule = renderer.rootRule()\n\n# \ud83c\udf1f Enhanced building symbol with gradients\nsymbol = QgsFillSymbol.createSimple({\n    'color': '#b3b3b3',\n    'outline_color': '#666666',\n    'outline_width': '0.5'\n})\n\n# \u26a1 Advanced geometry generator for realistic isometric effect\ngeom_generator = QgsGeometryGeneratorSymbolLayer.create({\n    'geometryModifier': '''\n        translate(\n            extrude(\n                $geometry, \n                cos(radians(135)) * 0.7, \n                sin(radians(135)) * 0.7, \n                CASE \n                    WHEN \"height\" IS NULL THEN 5\n                    WHEN \"height\" &lt; 1 THEN 5\n                    ELSE \"height\" * 1.2\n                END\n            ),\n            -0.3 * COALESCE(\"height\", 5), \n            -0.3 * COALESCE(\"height\", 5)\n        )\n    '''\n})\n\n# \ud83c\udfa8 Apply advanced styling\nsymbol.changeSymbolLayer(0, geom_generator)\nrenderer.rootRule().setSymbol(symbol)\nlayer.setRenderer(renderer)\nlayer.triggerRepaint()\n\nprint(\"\ud83c\udf89 Advanced isometric view applied!\")\n</code></pre> \ud83d\udd27 Advanced Features <ul> <li>\ud83c\udfaf Smart Height Handling: Automatic fallback for NULL values</li> <li>\ud83d\udcd0 Perspective Correction: More realistic 3D angles</li> <li>\ud83c\udfa8 Enhanced Shadows: Dynamic shadow positioning</li> <li>\ud83d\udcca Height Scaling: Adjustable vertical exaggeration</li> </ul>"},{"location":"advanced-viz/#sophisticated-height-categorization","title":"\ud83c\udf08 Sophisticated Height Categorization","text":""},{"location":"advanced-viz/#multi-criteria-building-classification","title":"\ud83c\udfd9\ufe0f Multi-Criteria Building Classification","text":"#### \ud83d\udcca **Advanced Classification System**   \ud83c\udfe2 Category \ud83d\udccf Height Range \ud83c\udfa8 Color \ud83c\udfd7\ufe0f Description \ud83c\udfe0 Residential Low 0-5m #4CAF50 Single-story homes, shacks \ud83c\udfd8\ufe0f Residential Mid 5-10m #8BC34A 2-3 story houses \ud83c\udfe2 Commercial Low 10-20m #FFC107 4-6 story buildings \ud83c\udfec Commercial High 20-40m #FF9800 7-12 story towers \ud83c\udfd7\ufe0f Skyscrapers 40m+ #F44336 High-rise buildings"},{"location":"advanced-viz/#qgis-expression-based-styling","title":"\ud83d\udcca QGIS Expression-Based Styling","text":"#### \ud83c\udfa8 **Dynamic Color Expression**  <pre><code>-- \ud83c\udfaf Advanced QGIS expression for dynamic building colors\nCASE \n    WHEN \"height\" IS NULL OR \"height\" &lt; 0 THEN '#CCCCCC'  -- Unknown\n    WHEN \"height\" &lt;= 5 THEN '#4CAF50'   -- Low residential\n    WHEN \"height\" &lt;= 10 THEN '#8BC34A'  -- Mid residential  \n    WHEN \"height\" &lt;= 20 THEN '#FFC107'  -- Commercial low\n    WHEN \"height\" &lt;= 40 THEN '#FF9800'  -- Commercial high\n    ELSE '#F44336'                      -- Skyscrapers\nEND\n</code></pre>  #### \u2728 **Advanced Height-Based Opacity**  <pre><code>-- \ud83d\udcca Dynamic opacity based on building confidence\nCASE \n    WHEN \"building_presence\" &gt;= 0.8 THEN 255  -- High confidence: fully opaque\n    WHEN \"building_presence\" &gt;= 0.6 THEN 200  -- Medium confidence: semi-transparent\n    WHEN \"building_presence\" &gt;= 0.4 THEN 150  -- Low confidence: more transparent\n    ELSE 100                                   -- Very low confidence: highly transparent\nEND\n</code></pre>"},{"location":"advanced-viz/#statistical-visualization-dashboard","title":"\ud83d\udcc8 Statistical Visualization Dashboard","text":""},{"location":"advanced-viz/#create-height-distribution-charts","title":"\ud83d\udcca Create Height Distribution Charts","text":"#### \ud83d\udccb **Python Script for Advanced Analytics**  <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom qgis.core import *\n\ndef create_building_analytics_dashboard(layer):\n    \"\"\"\n    \ud83d\udcca Create comprehensive building height analytics dashboard\n    \"\"\"\n\n    # \ud83c\udfaf Extract building data\n    features = [f for f in layer.getFeatures()]\n    heights = [f['height'] for f in features if f['height'] is not None]\n    areas = [f['area'] for f in features if f['area'] is not None]\n\n    # \ud83c\udfa8 Set up dashboard style\n    plt.style.use('dark_background')\n    fig, axes = plt.subplots(2, 3, figsize=(18, 12))\n    fig.suptitle('\ud83c\udfd9\ufe0f Building Heights Analytics Dashboard', \n                 fontsize=24, fontweight='bold', color='white')\n\n    # \ud83d\udcca Height distribution histogram\n    ax1 = axes[0, 0]\n    ax1.hist(heights, bins=30, color='#00ff7f', alpha=0.7, edgecolor='white')\n    ax1.set_title('\ud83d\udcca Height Distribution', fontsize=14, color='white')\n    ax1.set_xlabel('Height (m)', color='white')\n    ax1.set_ylabel('Count', color='white')\n\n    # \ud83e\udd67 Building category pie chart\n    ax2 = axes[0, 1]\n    categories = ['Low (0-5m)', 'Mid (5-15m)', 'High (15-30m)', 'Very High (30m+)']\n    counts = [\n        sum(1 for h in heights if 0 &lt;= h &lt; 5),\n        sum(1 for h in heights if 5 &lt;= h &lt; 15),\n        sum(1 for h in heights if 15 &lt;= h &lt; 30),\n        sum(1 for h in heights if h &gt;= 30)\n    ]\n    colors = ['#4CAF50', '#FFC107', '#FF9800', '#F44336']\n    ax2.pie(counts, labels=categories, colors=colors, autopct='%1.1f%%')\n    ax2.set_title('\ud83c\udfe2 Building Categories', fontsize=14, color='white')\n\n    # \ud83d\udcc8 Height vs Area scatter plot\n    ax3 = axes[0, 2]\n    if len(areas) == len(heights):\n        ax3.scatter(areas, heights, alpha=0.6, c='#ff6b6b', s=30)\n        ax3.set_title('\ud83d\udcd0 Height vs Area', fontsize=14, color='white')\n        ax3.set_xlabel('Area (m\u00b2)', color='white')\n        ax3.set_ylabel('Height (m)', color='white')\n\n    # \ud83d\udcca Statistical summary\n    ax4 = axes[1, 0]\n    stats_text = f\"\"\"\n    \ud83d\udcca STATISTICS SUMMARY\n\n    Total Buildings: {len(heights):,}\n\n    \ud83c\udfd7\ufe0f Height Statistics:\n    Mean: {np.mean(heights):.1f}m\n    Median: {np.median(heights):.1f}m  \n    Max: {np.max(heights):.1f}m\n    Min: {np.min(heights):.1f}m\n\n    \ud83c\udfe2 Height Categories:\n    Low (0-5m): {counts[0]:,} ({counts[0]/len(heights)*100:.1f}%)\n    Mid (5-15m): {counts[1]:,} ({counts[1]/len(heights)*100:.1f}%)\n    High (15-30m): {counts[2]:,} ({counts[2]/len(heights)*100:.1f}%)\n    Very High (30m+): {counts[3]:,} ({counts[3]/len(heights)*100:.1f}%)\n    \"\"\"\n    ax4.text(0.1, 0.9, stats_text, transform=ax4.transAxes, \n             fontsize=12, color='white', verticalalignment='top',\n             fontfamily='monospace')\n    ax4.axis('off')\n\n    # \ud83d\udcc8 Cumulative distribution\n    ax5 = axes[1, 1]\n    sorted_heights = np.sort(heights)\n    cumulative = np.arange(1, len(sorted_heights) + 1) / len(sorted_heights) * 100\n    ax5.plot(sorted_heights, cumulative, color='#4facfe', linewidth=3)\n    ax5.set_title('\ud83d\udcc8 Cumulative Distribution', fontsize=14, color='white')\n    ax5.set_xlabel('Height (m)', color='white')\n    ax5.set_ylabel('Cumulative %', color='white')\n    ax5.grid(True, alpha=0.3)\n\n    # \ud83c\udfaf Box plot\n    ax6 = axes[1, 2]\n    bp = ax6.boxplot(heights, patch_artist=True)\n    bp['boxes'][0].set_facecolor('#ff9a56')\n    ax6.set_title('\ud83d\udcca Height Distribution Box Plot', fontsize=14, color='white')\n    ax6.set_ylabel('Height (m)', color='white')\n\n    plt.tight_layout()\n    plt.savefig('building_analytics_dashboard.png', dpi=300, \n                bbox_inches='tight', facecolor='black')\n    plt.show()\n\n# \ud83d\ude80 Execute the dashboard\nlayer = iface.activeLayer()\ncreate_building_analytics_dashboard(layer)\n</code></pre>"},{"location":"advanced-viz/#interactive-web-visualizations","title":"\ud83c\udfae Interactive Web Visualizations","text":""},{"location":"advanced-viz/#3d-web-export-with-enhanced-features","title":"\ud83c\udf10 3D Web Export with Enhanced Features","text":"#### \ud83d\ude80 **Advanced Qgis2threejs Configuration**  <pre><code>// \ud83c\udfaf Custom JavaScript for enhanced web 3D viewer\n{\n    \"title\": \"\ud83c\udfd9\ufe0f Interactive Building Heights Explorer\",\n    \"camera\": {\n        \"position\": [longitude, latitude, height],\n        \"target\": [longitude, latitude, 0],\n        \"fov\": 45\n    },\n    \"lighting\": {\n        \"ambient\": 0.4,\n        \"directional\": {\n            \"intensity\": 0.8,\n            \"color\": \"#ffffff\",\n            \"position\": [1, 1, 1]\n        }\n    },\n    \"materials\": {\n        \"building_low\": {\n            \"color\": \"#4CAF50\",\n            \"opacity\": 0.9,\n            \"metalness\": 0.1,\n            \"roughness\": 0.8\n        },\n        \"building_high\": {\n            \"color\": \"#F44336\", \n            \"opacity\": 0.9,\n            \"metalness\": 0.3,\n            \"roughness\": 0.6\n        }\n    },\n    \"controls\": {\n        \"enableRotate\": true,\n        \"enableZoom\": true,\n        \"enablePan\": true,\n        \"autoRotate\": false,\n        \"autoRotateSpeed\": 2.0\n    }\n}\n</code></pre>"},{"location":"advanced-viz/#mobile-optimized-3d-views","title":"\ud83d\udcf1 Mobile-Optimized 3D Views","text":"#### \ud83d\udcf2 **Responsive Design Settings**  <pre><code>/* \ud83c\udfa8 CSS for mobile-friendly 3D viewer */\n@media (max-width: 768px) {\n    .threejs-container {\n        width: 100%;\n        height: 70vh;\n        touch-action: none;\n    }\n\n    .controls-panel {\n        position: fixed;\n        bottom: 20px;\n        left: 50%;\n        transform: translateX(-50%);\n        background: rgba(0, 0, 0, 0.8);\n        border-radius: 10px;\n        padding: 15px;\n    }\n\n    .height-legend {\n        font-size: 12px;\n        line-height: 1.4;\n        color: white;\n    }\n}\n\n/* \ud83c\udfaf Touch gestures optimization */\n.building-tooltip {\n    background: linear-gradient(135deg, #667eea, #764ba2);\n    color: white;\n    padding: 10px;\n    border-radius: 8px;\n    font-family: 'Arial', sans-serif;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n}\n</code></pre>"},{"location":"advanced-viz/#heat-map-visualizations","title":"\ud83d\udd25 Heat Map Visualizations","text":""},{"location":"advanced-viz/#building-density-heat-maps","title":"\ud83c\udf21\ufe0f Building Density Heat Maps","text":"#### \ud83d\udcca **QGIS Heat Map Creation**  1. **\ud83c\udfaf Vector \u2192 Analysis Tools \u2192 Heatmap (Kernel Density Estimation)**  2. **\u2699\ufe0f Configuration**:    <pre><code>\ud83d\udd25 Heatmap Settings:\n\u251c\u2500\u2500 \ud83d\udcca Input layer: Building polygons\n\u251c\u2500\u2500 \ud83d\udccf Radius: 100 meters (adjust based on density)\n\u251c\u2500\u2500 \ud83d\udcd0 Output raster size: 1000x1000 pixels\n\u251c\u2500\u2500 \ud83d\udcc8 Weight field: \"height\" (for height-weighted density)\n\u2514\u2500\u2500 \ud83c\udfa8 Kernel shape: Quartic (smooth results)\n</code></pre>  3. **\ud83c\udfa8 Styling**:    - **Color Ramp**: Hot (black \u2192 red \u2192 yellow \u2192 white)    - **Blending Mode**: Multiply or Screen    - **Opacity**: 70-80% for overlay effect"},{"location":"advanced-viz/#multi-variable-heat-maps","title":"\ud83c\udf08 Multi-Variable Heat Maps","text":"\ud83d\udd25 Height Heat Map <ul> <li>Weight: Building height</li> <li>Purpose: Show tall building clusters</li> <li>Colors: Blue \u2192 Red</li> <li>Applications: Urban planning, skyline analysis</li> </ul> \ud83d\udcca Density Heat Map <ul> <li>Weight: Building count</li> <li>Purpose: Show building concentration</li> <li>Colors: Purple \u2192 Yellow</li> <li>Applications: Population estimation, infrastructure planning</li> </ul>"},{"location":"advanced-viz/#animation-and-temporal-visualization","title":"\ud83c\udfad Animation and Temporal Visualization","text":""},{"location":"advanced-viz/#time-series-animation","title":"\u23f0 Time Series Animation","text":"#### \ud83c\udfac **Create Building Growth Animation**  <pre><code># \ud83c\udfa5 Python script for temporal building animation\nimport os\nfrom datetime import datetime\n\ndef create_temporal_animation(base_layers, years, output_dir):\n    \"\"\"\n    \ud83c\udfac Create animated GIF showing building height changes over time\n    \"\"\"\n\n    # \ud83d\udcc1 Setup output directory\n    os.makedirs(output_dir, exist_ok=True)\n    frames = []\n\n    for year in years:\n        # \ud83d\udcca Load data for specific year\n        layer_path = f\"building_heights_{year}.gpkg\"\n        layer = QgsVectorLayer(layer_path, f\"Buildings_{year}\", \"ogr\")\n\n        # \ud83c\udfa8 Apply consistent styling\n        apply_height_styling(layer, year)\n\n        # \ud83d\udcf7 Capture frame\n        settings = QgsMapSettings()\n        settings.setLayers([layer])\n        settings.setBackgroundColor(QColor(0, 0, 0))\n\n        # \ud83d\udcbe Save frame\n        frame_path = f\"{output_dir}/frame_{year}.png\"\n        export_frame(settings, frame_path)\n        frames.append(frame_path)\n\n    # \ud83c\udf9e\ufe0f Create animated GIF\n    create_gif_from_frames(frames, f\"{output_dir}/building_growth_animation.gif\")\n    print(f\"\ud83c\udf89 Animation saved to: {output_dir}/building_growth_animation.gif\")\n\ndef apply_height_styling(layer, year):\n    \"\"\"\ud83c\udfa8 Apply consistent height-based styling\"\"\"\n    # Implementation for consistent styling across years\n    pass\n\ndef create_gif_from_frames(frames, output_path):\n    \"\"\"\ud83c\udf9e\ufe0f Combine frames into animated GIF\"\"\"\n    # Use PIL or similar library to create GIF\n    pass\n</code></pre>"},{"location":"advanced-viz/#growth-pattern-visualization","title":"\ud83d\udcc8 Growth Pattern Visualization","text":"#### \ud83d\udcca **Building Height Change Detection**  <pre><code>-- \ud83d\udcc8 SQL query for detecting height changes\nSELECT \n    building_id,\n    height_2019,\n    height_2023,\n    (height_2023 - height_2019) as height_change,\n    CASE \n        WHEN (height_2023 - height_2019) &gt; 10 THEN 'Major Growth'\n        WHEN (height_2023 - height_2019) &gt; 5 THEN 'Moderate Growth'\n        WHEN (height_2023 - height_2019) &gt; 0 THEN 'Minor Growth'\n        WHEN (height_2023 - height_2019) = 0 THEN 'No Change'\n        ELSE 'Decline/Demolition'\n    END as change_category,\n    ST_AsText(geometry) as location\nFROM building_temporal_comparison\nWHERE building_id IS NOT NULL\nORDER BY height_change DESC;\n</code></pre>  #### \ud83c\udfa8 **Change Visualization Symbology**  | Change Type | Color | Symbol | Meaning | |-------------|--------|---------|---------| | **\ud83d\ude80 Major Growth (+10m)** | #FF0000 | \u2197\ufe0f | Significant construction | | **\ud83d\udcc8 Moderate Growth (+5-10m)** | #FF9800 | \u2197\ufe0f | Building additions | | **\ud83d\udd39 Minor Growth (+0-5m)** | #FFC107 | \u2192 | Small improvements | | **\u2b55 No Change** | #9E9E9E | \u25cb | Stable buildings | | **\ud83d\udd3b Decline** | #2196F3 | \u2198\ufe0f | Demolition/damage |"},{"location":"advanced-viz/#performance-optimization-tips","title":"\ud83c\udfaf Performance Optimization Tips","text":"\u26a1 Rendering Speed <ul> <li>Use scale-dependent rendering for complex styles</li> <li>Simplify geometries for overview displays</li> <li>Cache styled layers as raster tiles</li> <li>Enable feature caching in QGIS settings</li> </ul> \ud83d\udcbe Memory Management <ul> <li>Process large datasets in chunks</li> <li>Use virtual layers for on-the-fly calculations</li> <li>Enable compression for exported files</li> <li>Clear cache regularly during processing</li> </ul> \ud83c\udfa8 Visual Quality <ul> <li>Use anti-aliasing for smooth edges</li> <li>Apply appropriate transparency levels</li> <li>Choose color schemes for accessibility</li> <li>Test visualizations at different zoom levels</li> </ul> \ud83c\udfa8 Advanced Visualization Mastery Achieved! <p>You now possess the skills to create world-class building height visualizations!</p>"},{"location":"applications/","title":"\ud83c\udfd7\ufe0f Applications","text":"\ud83c\udf1f Real-World Building Height Applications <p>Discover powerful ways to leverage building height data for impactful urban analysis and decision-making</p>"},{"location":"applications/#urban-planning-development","title":"\ud83c\udfd9\ufe0f Urban Planning &amp; Development","text":""},{"location":"applications/#building-density-analysis","title":"\ud83d\udcca Building Density Analysis","text":"#### \ud83c\udfaf **Floor Area Ratio (FAR) Calculation**    **Floor Area Ratio = Total Floor Area / Plot Area**  <pre><code># \ud83c\udfe2 Calculate FAR using building height data\ndef calculate_far(buildings_gdf, plot_polygons_gdf):\n    \"\"\"\n    \ud83d\udcca Calculate Floor Area Ratio for urban planning\n    \"\"\"\n    results = []\n\n    for idx, plot in plot_polygons_gdf.iterrows():\n        # \ud83d\udd0d Find buildings within this plot\n        buildings_in_plot = buildings_gdf[\n            buildings_gdf.geometry.intersects(plot.geometry)\n        ]\n\n        if len(buildings_in_plot) &gt; 0:\n            # \ud83d\udcd0 Calculate total floor area (assuming 3m per floor)\n            floor_height = 3.0  # meters per floor\n            total_floor_area = sum(\n                (building['height'] / floor_height) * building.geometry.area \n                for _, building in buildings_in_plot.iterrows()\n            )\n\n            # \ud83d\udcca Calculate FAR\n            plot_area = plot.geometry.area\n            far = total_floor_area / plot_area\n\n            results.append({\n                'plot_id': idx,\n                'far': far,\n                'building_count': len(buildings_in_plot),\n                'plot_area': plot_area,\n                'total_floor_area': total_floor_area\n            })\n\n    return pd.DataFrame(results)\n\n# \ud83c\udfa8 Visualization categories\ndef categorize_far(far_value):\n    \"\"\"\ud83c\udfd7\ufe0f Categorize FAR for planning purposes\"\"\"\n    if far_value &lt; 0.5:\n        return \"\ud83c\udf33 Low Density Residential\"\n    elif far_value &lt; 1.0:\n        return \"\ud83c\udfd8\ufe0f Medium Density Residential\" \n    elif far_value &lt; 2.0:\n        return \"\ud83c\udfe2 Commercial/Mixed Use\"\n    elif far_value &lt; 4.0:\n        return \"\ud83c\udfec High Density Commercial\"\n    else:\n        return \"\ud83c\udfd7\ufe0f Ultra High Density\"\n</code></pre>   #### \ud83d\udcc8 **Development Potential Assessment**   \ud83c\udfaf Analysis Type \ud83d\udcca Metrics \ud83c\udfd7\ufe0f Planning Use \ud83c\udfe0 Density Mapping Buildings/hectare, Average height Zoning decisions, Infrastructure planning \ud83d\udcc8 Growth Pattern Height change over time Development trends, Future projections \ud83c\udfaf Underutilization Low height vs. zoning potential Redevelopment opportunities \ud83c\udf06 Skyline Analysis Height distribution profiles Aesthetic planning, View corridors"},{"location":"applications/#shadow-impact-studies","title":"\ud83c\udf33 Shadow Impact Studies","text":"#### \u2600\ufe0f **Solar Access Analysis**  <pre><code># \u2600\ufe0f Shadow analysis for urban planning\nimport numpy as np\nfrom datetime import datetime, timedelta\n\ndef calculate_building_shadows(buildings_gdf, date, latitude, longitude):\n    \"\"\"\n    \ud83c\udf24\ufe0f Calculate shadow patterns for building height planning\n    \"\"\"\n    shadows = []\n\n    # \u2600\ufe0f Solar position calculation\n    solar_elevation, solar_azimuth = calculate_solar_position(\n        date, latitude, longitude\n    )\n\n    for idx, building in buildings_gdf.iterrows():\n        building_height = building['height']\n        building_geom = building.geometry\n\n        # \ud83d\udcd0 Calculate shadow length\n        if solar_elevation &gt; 0:  # Sun is above horizon\n            shadow_length = building_height / np.tan(np.radians(solar_elevation))\n\n            # \ud83e\udded Shadow direction (opposite to sun azimuth)\n            shadow_azimuth = (solar_azimuth + 180) % 360\n\n            # \ud83d\udccd Create shadow polygon\n            shadow_polygon = create_shadow_polygon(\n                building_geom, shadow_length, shadow_azimuth\n            )\n\n            shadows.append({\n                'building_id': idx,\n                'shadow_area': shadow_polygon.area,\n                'shadow_geometry': shadow_polygon,\n                'building_height': building_height,\n                'shadow_length': shadow_length\n            })\n\n    return gpd.GeoDataFrame(shadows)\n\n# \ud83c\udfaf Critical times for shadow analysis\ncritical_times = [\n    (\"\ud83c\udf05 Morning (9 AM)\", datetime(2023, 12, 21, 9, 0)),  # Winter solstice\n    (\"\ud83c\udf1e Noon (12 PM)\", datetime(2023, 12, 21, 12, 0)),\n    (\"\ud83c\udf07 Afternoon (3 PM)\", datetime(2023, 12, 21, 15, 0)),\n    (\"\ud83c\udf1e Summer Solstice\", datetime(2023, 6, 21, 12, 0))   # Summer solstice\n]\n</code></pre>  #### \ud83c\udfe2 **Building Height Impact Assessment**    **\ud83c\udfaf Key Shadow Impact Considerations:**  - **\ud83c\udfe0 Residential Areas:** Minimum 4 hours of direct sunlight - **\ud83c\udf33 Public Parks:** Full sun access during peak hours (10 AM - 3 PM)   - **\ud83c\udfeb Schools:** Playground areas should receive morning sunlight - **\u2600\ufe0f Solar Installations:** No shadowing on renewable energy systems - **\ud83d\ude97 Streets:** Ice formation prevention in winter"},{"location":"applications/#emergency-response-safety","title":"\ud83d\udea8 Emergency Response &amp; Safety","text":""},{"location":"applications/#evacuation-route-planning","title":"\ud83d\ude91 Evacuation Route Planning","text":"#### \ud83c\udfc3\u200d\u2642\ufe0f **Population Estimation for Emergency Planning**   <pre><code># \ud83d\udc65 Population estimation using building heights\ndef estimate_population_from_buildings(buildings_gdf, population_density_per_floor=4):\n    \"\"\"\n    \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 Estimate population for emergency planning using building data\n    \"\"\"\n    results = []\n\n    for idx, building in buildings_gdf.iterrows():\n        # \ud83c\udfe2 Estimate number of floors (assuming 3m per floor)\n        floor_height = 3.0\n        estimated_floors = max(1, int(building['height'] / floor_height))\n\n        # \ud83d\udcd0 Floor area estimation\n        building_footprint_area = building.geometry.area\n\n        # \ud83d\udc65 Population estimation\n        if building_footprint_area &gt; 200:  # Large building\n            # \ud83c\udfe2 Commercial/residential complex\n            population_per_floor = building_footprint_area / 25  # 25m\u00b2 per person\n        elif building_footprint_area &gt; 100:  # Medium building\n            # \ud83c\udfd8\ufe0f Multi-family residential\n            population_per_floor = building_footprint_area / 20  # 20m\u00b2 per person\n        else:  # Small building\n            # \ud83c\udfe0 Single family\n            population_per_floor = min(6, building_footprint_area / 15)\n\n        estimated_population = estimated_floors * population_per_floor\n\n        results.append({\n            'building_id': idx,\n            'estimated_population': int(estimated_population),\n            'floors': estimated_floors,\n            'area': building_footprint_area,\n            'height': building['height'],\n            'pop_density': estimated_population / building_footprint_area\n        })\n\n    return pd.DataFrame(results)\n\n# \ud83d\udea8 Emergency evacuation capacity planning\ndef plan_evacuation_capacity(buildings_with_population, evacuation_sites):\n    \"\"\"\n    \ud83c\udfc3\u200d\u2642\ufe0f Plan evacuation routes based on building populations\n    \"\"\"\n    for site in evacuation_sites:\n        # \ud83c\udfaf Find buildings within evacuation radius\n        nearby_buildings = buildings_with_population[\n            buildings_with_population.geometry.distance(site.geometry) &lt; 1000  # 1km radius\n        ]\n\n        total_population = nearby_buildings['estimated_population'].sum()\n        site_capacity = site['capacity']\n\n        if total_population &gt; site_capacity:\n            print(f\"\u26a0\ufe0f Evacuation site {site['name']} overloaded:\")\n            print(f\"   Population: {total_population:,}\")\n            print(f\"   Capacity: {site_capacity:,}\")\n            print(f\"   Deficit: {total_population - site_capacity:,}\")\n</code></pre>   #### \ud83c\udf0a **Flood Impact Modeling**   <pre><code># \ud83c\udf0a Flood risk assessment using building heights\ndef assess_flood_vulnerability(buildings_gdf, flood_depth_raster, dem_raster):\n    \"\"\"\n    \ud83c\udf0a Assess building vulnerability to flooding\n    \"\"\"\n    vulnerable_buildings = []\n\n    for idx, building in buildings_gdf.iterrows():\n        # \ud83d\udccd Get building location\n        building_centroid = building.geometry.centroid\n\n        # \ud83c\udf0a Extract flood depth at building location\n        flood_depth = extract_raster_value(flood_depth_raster, building_centroid)\n        ground_elevation = extract_raster_value(dem_raster, building_centroid)\n\n        # \ud83c\udfd7\ufe0f Building characteristics\n        building_height = building['height']\n        building_area = building.geometry.area\n\n        # \ud83c\udfaf Vulnerability assessment\n        if flood_depth &gt; 0:\n            flood_level = ground_elevation + flood_depth\n            building_top = ground_elevation + building_height\n\n            if flood_level &gt; ground_elevation + 0.5:  # Water &gt; 0.5m above ground\n                vulnerability_level = \"\ud83d\udd34 High Risk\"\n                evacuation_priority = 1\n            elif flood_level &gt; ground_elevation:  # Any flooding\n                vulnerability_level = \"\ud83d\udfe1 Medium Risk\"\n                evacuation_priority = 2\n            else:\n                vulnerability_level = \"\ud83d\udfe2 Low Risk\"\n                evacuation_priority = 3\n\n            # \ud83c\udfe2 Multi-story buildings can serve as shelters\n            if building_height &gt; 6 and building_area &gt; 100:\n                shelter_potential = True\n                shelter_capacity = int((building_height - flood_depth) / 3 * building_area / 4)\n            else:\n                shelter_potential = False\n                shelter_capacity = 0\n\n            vulnerable_buildings.append({\n                'building_id': idx,\n                'flood_depth': flood_depth,\n                'vulnerability': vulnerability_level,\n                'evacuation_priority': evacuation_priority,\n                'shelter_potential': shelter_potential,\n                'shelter_capacity': shelter_capacity,\n                'estimated_population': building.get('estimated_population', 0)\n            })\n\n    return pd.DataFrame(vulnerable_buildings)\n</code></pre>"},{"location":"applications/#line-of-sight-analysis","title":"\ud83d\udce1 Line-of-Sight Analysis","text":"#### \ud83d\udcf6 **Communication Network Planning**  <pre><code># \ud83d\udce1 Line-of-sight analysis for emergency communications\ndef calculate_line_of_sight(observer_point, target_points, buildings_gdf, dem_raster):\n    \"\"\"\n    \ud83d\udc41\ufe0f Calculate line-of-sight for emergency communication planning\n    \"\"\"\n    los_results = []\n\n    for target_id, target_point in target_points.iterrows():\n        # \ud83c\udfaf Create line between observer and target\n        line = LineString([observer_point, target_point.geometry])\n\n        # \ud83c\udfd7\ufe0f Find buildings intersecting the line\n        intersecting_buildings = buildings_gdf[\n            buildings_gdf.geometry.intersects(line)\n        ]\n\n        # \ud83d\udccf Check if buildings block the view\n        is_blocked = False\n        blocking_height = 0\n\n        for _, building in intersecting_buildings.iterrows():\n            building_height = building['height']\n\n            # \ud83d\udcd0 Calculate height at intersection point\n            intersection = building.geometry.intersection(line)\n            if not intersection.is_empty:\n                # \ud83d\udd0d Get ground elevation at intersection\n                ground_elev = extract_raster_value(dem_raster, intersection.centroid)\n                total_height = ground_elev + building_height\n\n                if total_height &gt; blocking_height:\n                    blocking_height = total_height\n                    is_blocked = True\n\n        los_results.append({\n            'target_id': target_id,\n            'line_of_sight': not is_blocked,\n            'blocking_height': blocking_height,\n            'distance': observer_point.distance(target_point.geometry),\n            'buildings_in_path': len(intersecting_buildings)\n        })\n\n    return pd.DataFrame(los_results)\n\n# \ud83d\udea8 Emergency communication tower placement\ndef optimize_tower_placement(buildings_gdf, coverage_requirements):\n    \"\"\"\n    \ud83d\udce1 Optimize emergency communication tower placement\n    \"\"\"\n    # \ud83c\udfaf Find optimal tower locations\n    # Consider: High elevation points, minimal building obstruction, maximum coverage\n    pass\n</code></pre>"},{"location":"applications/#urban-research-analysis","title":"\ud83d\udd2c Urban Research &amp; Analysis","text":""},{"location":"applications/#urban-heat-island-assessment","title":"\ud83c\udf21\ufe0f Urban Heat Island Assessment","text":"#### \ud83c\udfd9\ufe0f **Building Density vs Temperature Analysis**   <pre><code># \ud83c\udf21\ufe0f Urban heat island analysis using building heights\ndef analyze_urban_heat_correlation(buildings_gdf, temperature_raster):\n    \"\"\"\n    \ud83d\udd25 Analyze correlation between building density/height and temperature\n    \"\"\"\n    # \ud83d\udcca Create analysis grid (e.g., 500m x 500m cells)\n    grid = create_analysis_grid(buildings_gdf.total_bounds, cell_size=500)\n\n    heat_analysis = []\n\n    for idx, cell in grid.iterrows():\n        # \ud83c\udfe2 Buildings within this cell\n        cell_buildings = buildings_gdf[\n            buildings_gdf.geometry.intersects(cell.geometry)\n        ]\n\n        if len(cell_buildings) &gt; 0:\n            # \ud83d\udcca Calculate building metrics\n            total_building_area = cell_buildings.geometry.area.sum()\n            avg_building_height = cell_buildings['height'].mean()\n            max_building_height = cell_buildings['height'].max()\n            building_count = len(cell_buildings)\n\n            # \ud83d\udcd0 Calculate building coverage ratio\n            cell_area = cell.geometry.area\n            building_coverage_ratio = total_building_area / cell_area\n\n            # \ud83c\udfd7\ufe0f Calculate floor area ratio\n            total_floor_area = sum(\n                building['height'] / 3.0 * building.geometry.area \n                for _, building in cell_buildings.iterrows()\n            )\n            floor_area_ratio = total_floor_area / cell_area\n\n            # \ud83c\udf21\ufe0f Extract temperature data\n            avg_temperature = extract_raster_statistics(\n                temperature_raster, cell.geometry, 'mean'\n            )\n\n            heat_analysis.append({\n                'cell_id': idx,\n                'avg_temperature': avg_temperature,\n                'building_coverage': building_coverage_ratio,\n                'avg_height': avg_building_height,\n                'max_height': max_building_height,\n                'building_count': building_count,\n                'floor_area_ratio': floor_area_ratio,\n                'geometry': cell.geometry\n            })\n\n    return gpd.GeoDataFrame(heat_analysis)\n\n# \ud83d\udcc8 Statistical analysis and visualization\ndef create_heat_correlation_analysis(heat_data):\n    \"\"\"\ud83d\udcca Create correlation analysis and visualizations\"\"\"\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n\n    # \ud83c\udfa8 Correlation matrix\n    correlation_vars = ['avg_temperature', 'building_coverage', 'avg_height', \n                       'max_height', 'floor_area_ratio']\n    corr_matrix = heat_data[correlation_vars].corr()\n\n    plt.figure(figsize=(10, 8))\n    sns.heatmap(corr_matrix, annot=True, cmap='RdYlBu_r', center=0)\n    plt.title('\ud83c\udf21\ufe0f Urban Heat Island - Building Correlation Matrix')\n    plt.tight_layout()\n    plt.show()\n</code></pre>"},{"location":"applications/#climate-change-impact-studies","title":"\ud83c\udf31 Climate Change Impact Studies","text":"#### \ud83d\udcc8 **Building Stock Resilience Assessment**   \ud83c\udfaf Climate Factor \ud83d\udcca Building Height Relevance \ud83d\udcc8 Analysis Method \ud83d\udee0\ufe0f Planning Response \ud83c\udf0a Sea Level Rise Ground floor elevation critical Building height + DEM analysis Elevation requirements, flood barriers \ud83d\udca8 Extreme Winds Tall buildings more vulnerable Height vs. wind exposure Building codes, wind barriers \ud83d\udd25 Urban Heat Building density affects temperature FAR vs. temperature correlation Green roofs, building spacing \u26c8\ufe0f Extreme Precipitation Runoff from building density Surface coverage analysis Stormwater management"},{"location":"applications/#informal-settlement-mapping","title":"\ud83c\udfd8\ufe0f Informal Settlement Mapping","text":"#### \ud83c\udfaf **Building Pattern Recognition**  <pre><code># \ud83c\udfd8\ufe0f Identify informal settlements using building characteristics\ndef identify_informal_settlements(buildings_gdf):\n    \"\"\"\n    \ud83d\udd0d Identify informal settlements based on building height patterns\n    \"\"\"\n    settlement_indicators = []\n\n    # \ud83d\udcca Create spatial clusters for analysis\n    building_clusters = create_spatial_clusters(buildings_gdf, cluster_radius=100)\n\n    for cluster_id, cluster_buildings in building_clusters.groupby('cluster_id'):\n        if len(cluster_buildings) &gt;= 10:  # Minimum cluster size\n\n            # \ud83d\udccf Calculate cluster characteristics\n            avg_height = cluster_buildings['height'].mean()\n            height_std = cluster_buildings['height'].std()\n            avg_area = cluster_buildings.geometry.area.mean()\n            area_std = cluster_buildings.geometry.area.std()\n\n            # \ud83c\udfd7\ufe0f Density calculations\n            cluster_area = cluster_buildings.geometry.unary_union.convex_hull.area\n            building_density = len(cluster_buildings) / (cluster_area / 10000)  # buildings per hectare\n\n            # \ud83c\udfaf Informal settlement indicators\n            informal_indicators = {\n                'low_height': avg_height &lt; 4.0,  # Predominantly single-story\n                'height_uniformity': height_std &lt; 1.5,  # Similar heights\n                'small_buildings': avg_area &lt; 80,  # Small footprints\n                'high_density': building_density &gt; 50,  # Dense packing\n                'irregular_pattern': calculate_pattern_irregularity(cluster_buildings)\n            }\n\n            # \ud83d\udcca Score informal settlement likelihood\n            informal_score = sum(informal_indicators.values()) / len(informal_indicators)\n\n            settlement_indicators.append({\n                'cluster_id': cluster_id,\n                'building_count': len(cluster_buildings),\n                'avg_height': avg_height,\n                'avg_area': avg_area,\n                'density': building_density,\n                'informal_score': informal_score,\n                'likely_informal': informal_score &gt; 0.6,\n                'geometry': cluster_buildings.geometry.unary_union.convex_hull\n            })\n\n    return gpd.GeoDataFrame(settlement_indicators)\n\n# \ud83c\udfa8 Visualization of informal settlement probability\ninformal_settlements = identify_informal_settlements(buildings_gdf)\ninformal_settlements['category'] = informal_settlements['informal_score'].apply(\n    lambda x: '\ud83d\udd34 High Probability' if x &gt; 0.7 \n              else '\ud83d\udfe1 Medium Probability' if x &gt; 0.4 \n              else '\ud83d\udfe2 Low Probability'\n)\n</code></pre>"},{"location":"applications/#economic-real-estate-applications","title":"\ud83d\udcb0 Economic &amp; Real Estate Applications","text":""},{"location":"applications/#property-valuation-support","title":"\ud83c\udfe0 Property Valuation Support","text":"#### \ud83d\udcb5 **Building Volume-Based Valuation**   <pre><code># \ud83d\udcb0 Property valuation using building characteristics\ndef estimate_property_values(buildings_gdf, price_per_sqm_by_height):\n    \"\"\"\n    \ud83c\udfe0 Estimate property values using building height and area data\n    \"\"\"\n    valuations = []\n\n    for idx, building in buildings_gdf.iterrows():\n        building_height = building['height']\n        building_area = building.geometry.area\n\n        # \ud83c\udfd7\ufe0f Estimate number of floors\n        floors = max(1, int(building_height / 3.0))\n\n        # \ud83d\udcca Total floor area estimation\n        total_floor_area = floors * building_area\n\n        # \ud83d\udcb5 Price determination by building type\n        if building_height &lt;= 5:  # Single story\n            price_category = 'residential_low'\n            base_price = price_per_sqm_by_height.get(price_category, 500)\n        elif building_height &lt;= 15:  # Low-rise\n            price_category = 'residential_mid'\n            base_price = price_per_sqm_by_height.get(price_category, 800)\n        elif building_height &lt;= 30:  # Mid-rise\n            price_category = 'commercial_low'  \n            base_price = price_per_sqm_by_height.get(price_category, 1200)\n        else:  # High-rise\n            price_category = 'commercial_high'\n            base_price = price_per_sqm_by_height.get(price_category, 2000)\n\n        # \ud83c\udfaf Calculate estimated value\n        estimated_value = total_floor_area * base_price\n\n        valuations.append({\n            'building_id': idx,\n            'floors': floors,\n            'total_floor_area': total_floor_area,\n            'price_category': price_category,\n            'price_per_sqm': base_price,\n            'estimated_value': estimated_value,\n            'building_height': building_height,\n            'footprint_area': building_area\n        })\n\n    return pd.DataFrame(valuations)\n\n# \ud83d\udcca Market analysis by area\ndef analyze_market_by_district(buildings_with_values, district_boundaries):\n    \"\"\"\ud83d\udcb9 Analyze real estate market by district\"\"\"\n    market_analysis = []\n\n    for idx, district in district_boundaries.iterrows():\n        district_buildings = buildings_with_values[\n            buildings_with_values.geometry.intersects(district.geometry)\n        ]\n\n        if len(district_buildings) &gt; 0:\n            total_value = district_buildings['estimated_value'].sum()\n            avg_price_per_sqm = district_buildings['price_per_sqm'].mean()\n            total_floor_area = district_buildings['total_floor_area'].sum()\n\n            market_analysis.append({\n                'district_name': district.get('name', f'District_{idx}'),\n                'total_market_value': total_value,\n                'avg_price_per_sqm': avg_price_per_sqm,\n                'total_floor_area': total_floor_area,\n                'building_count': len(district_buildings),\n                'value_density': total_value / district.geometry.area\n            })\n\n    return pd.DataFrame(market_analysis)\n</code></pre>"},{"location":"applications/#investment-opportunity-analysis","title":"\ud83d\udcca Investment Opportunity Analysis","text":"\ud83c\udfd7\ufe0f Development Potential <ul> <li>\ud83d\udccf Underbuilt Areas: Low FAR vs zoning allowance</li> <li>\ud83d\udd04 Redevelopment Sites: Old/low buildings in prime locations</li> <li>\ud83d\udcc8 Growth Corridors: Areas with increasing building heights</li> <li>\ud83c\udfaf Mixed-Use Opportunities: Transition zones between uses</li> </ul> \ud83d\udcb0 Investment Metrics <ul> <li>\ud83d\udcca Price per Cubic Meter: Value efficiency analysis</li> <li>\ud83c\udfe2 Rent Potential: Floor area vs market rates</li> <li>\ud83d\udcc8 Value Growth: Height increase correlation</li> <li>\u26a1 ROI Estimation: Development cost vs returns</li> </ul>"},{"location":"applications/#smart-city-integration","title":"\ud83c\udf10 Smart City Integration","text":""},{"location":"applications/#iot-network-planning","title":"\ud83d\udce1 IoT Network Planning","text":"#### \ud83d\udcf6 **Sensor Placement Optimization**  <pre><code># \ud83d\udce1 Smart city sensor network planning using building heights\ndef optimize_sensor_placement(buildings_gdf, coverage_requirements):\n    \"\"\"\n    \ud83d\udcf6 Optimize IoT sensor placement using building height data\n    \"\"\"\n    optimal_locations = []\n\n    # \ud83c\udfaf Potential sensor locations (tall buildings, good coverage)\n    candidate_buildings = buildings_gdf[\n        (buildings_gdf['height'] &gt; 10) &amp;  # Minimum height for good coverage\n        (buildings_gdf.geometry.area &gt; 50)  # Sufficient building size\n    ].copy()\n\n    for sensor_type, requirements in coverage_requirements.items():\n        coverage_radius = requirements['range']\n        min_height = requirements.get('min_height', 5)\n\n        # \ud83d\udd0d Filter suitable buildings\n        suitable_buildings = candidate_buildings[\n            candidate_buildings['height'] &gt;= min_height\n        ]\n\n        # \ud83d\udcca Coverage optimization\n        selected_locations = []\n        uncovered_area = buildings_gdf.geometry.unary_union\n\n        while not uncovered_area.is_empty and len(suitable_buildings) &gt; 0:\n            # \ud83c\udfaf Find building providing maximum new coverage\n            best_coverage = 0\n            best_building_idx = None\n\n            for idx, building in suitable_buildings.iterrows():\n                coverage_circle = building.geometry.centroid.buffer(coverage_radius)\n                new_coverage = coverage_circle.intersection(uncovered_area).area\n\n                if new_coverage &gt; best_coverage:\n                    best_coverage = new_coverage\n                    best_building_idx = idx\n\n            if best_building_idx is not None:\n                selected_building = suitable_buildings.loc[best_building_idx]\n                coverage_area = selected_building.geometry.centroid.buffer(coverage_radius)\n\n                selected_locations.append({\n                    'building_id': best_building_idx,\n                    'sensor_type': sensor_type,\n                    'coverage_area': coverage_area.area,\n                    'building_height': selected_building['height'],\n                    'location': selected_building.geometry.centroid\n                })\n\n                # \ud83d\udcca Update uncovered area\n                uncovered_area = uncovered_area.difference(coverage_area)\n                suitable_buildings = suitable_buildings.drop(best_building_idx)\n\n        optimal_locations.extend(selected_locations)\n\n    return gpd.GeoDataFrame(optimal_locations)\n\n# \ud83c\udf10 Smart city applications by sensor type\nsensor_requirements = {\n    '\ud83d\udce1 Air Quality': {'range': 500, 'min_height': 15},\n    '\ud83d\udd0a Noise Monitoring': {'range': 200, 'min_height': 8},\n    '\ud83d\udcf6 WiFi/5G': {'range': 300, 'min_height': 20},\n    '\ud83d\udcf9 Traffic Cameras': {'range': 150, 'min_height': 6},\n    '\ud83c\udf21\ufe0f Weather Stations': {'range': 1000, 'min_height': 25}\n}\n</code></pre>"},{"location":"applications/#infrastructure-planning","title":"\ud83d\ude87 Infrastructure Planning\ud83c\udf1f Applications Expert Achieved!","text":"#### \ud83d\ude8c **Public Transit Demand Estimation**   \ud83d\ude87 Infrastructure Type \ud83d\udcca Building Height Use \ud83d\udcc8 Planning Metric \ud83d\ude8c Bus Routes Population density estimation Passengers per km\u00b2 \ud83d\ude87 Metro Stations Catchment area analysis Daily ridership potential \ud83d\ude97 Parking Facilities Commercial floor area Parking spaces required \u26a1 Utilities Total building volume Power/water demand <p>You now understand the vast potential of building height data across multiple domains!</p>"},{"location":"conclusion/","title":"\u2705 Conclusion","text":"\ud83c\udf89 Mastering Building Heights Extraction <p>Congratulations! You've completed the comprehensive guide to extracting and analyzing building heights from Google's Open Buildings 2.5D Temporal dataset</p>"},{"location":"conclusion/#what-youve-accomplished","title":"\ud83d\ude80 What You've Accomplished","text":"### \ud83c\udfaf **Core Skills Mastered**   \ud83d\udef0\ufe0f Data Extraction Methods <ul> <li>\u2705 **Google Earth Engine:** Advanced cloud-based processing</li> <li>\u2705 **Python Scripts:** Automated data download and processing</li> <li>\u2705 **Web Explorer:** Interactive data exploration</li> <li>\u2705 **Multi-method Integration:** Choosing the right tool for each task</li> </ul> \ud83d\uddfa\ufe0f Visualization Techniques <ul> <li>\u2705 **2.5D Rendering:** Isometric building views</li> <li>\u2705 **3D Visualization:** Interactive web exports</li> <li>\u2705 **Statistical Charts:** Height distribution analysis</li> <li>\u2705 **Heat Maps:** Density and pattern visualization</li> </ul> \ud83d\udd27 Technical Proficiency <ul> <li>\u2705 **QGIS Mastery:** Professional GIS workflows</li> <li>\u2705 **Python Programming:** Geospatial data processing</li> <li>\u2705 **Data Quality:** Validation and cleaning techniques</li> <li>\u2705 **Performance Optimization:** Large-scale processing</li> </ul> \ud83c\udfd7\ufe0f Real-world Applications <ul> <li>\u2705 **Urban Planning:** Density analysis, shadow studies</li> <li>\u2705 **Emergency Response:** Evacuation planning, risk assessment</li> <li>\u2705 **Research Applications:** Climate studies, population estimation</li> <li>\u2705 **Smart Cities:** IoT integration, infrastructure planning</li> </ul>"},{"location":"conclusion/#key-achievements-summary","title":"\ud83d\udcca Key Achievements Summary","text":"### \ud83c\udfc6 **Technical Milestones Reached**   \ud83c\udfaf Skill Area \ud83d\udcc8 Achievement Level \u2728 Key Capabilities **Data Extraction** \ud83c\udf1f\ud83c\udf1f\ud83c\udf1f Expert Multi-platform processing, optimization **Visualization** \ud83c\udf1f\ud83c\udf1f\ud83c\udf1f Expert 3D rendering, interactive dashboards **Analysis** \ud83c\udf1f\ud83c\udf1f\ud83c\udf1f Expert Statistical analysis, spatial modeling **Problem-Solving** \ud83c\udf1f\ud83c\udf1f\ud83c\udf1f Expert Troubleshooting, optimization strategies"},{"location":"conclusion/#the-impact-of-your-new-skills","title":"\ud83c\udf1f The Impact of Your New Skills","text":""},{"location":"conclusion/#transforming-urban-analysis","title":"\ud83c\udfd9\ufe0f Transforming Urban Analysis","text":"\ud83c\udfaf **You Can Now:**  **\ud83d\udcca For Urban Planners:** - Conduct comprehensive building density analyses for zoning decisions - Perform shadow impact studies for new development proposals   - Create data-driven urban growth projections and planning strategies - Support infrastructure planning with accurate population estimates  **\ud83d\udea8 For Emergency Managers:** - Design optimal evacuation routes based on building heights and population - Assess flood vulnerability with building-specific risk calculations - Plan emergency communication networks using line-of-sight analysis - Create evacuation capacity models for disaster preparedness  **\ud83d\udd2c For Researchers:** - Investigate urban heat island effects and climate change impacts - Study informal settlement patterns and urban development trends - Analyze correlation between building patterns and socioeconomic factors - Contribute to global urban monitoring and sustainable development goals  **\ud83d\udcbc For Real Estate &amp; Investment:** - Assess development potential and market opportunities - Calculate Floor Area Ratios and property valuations - Identify underutilized areas with redevelopment potential - Support investment decisions with quantitative urban metrics"},{"location":"conclusion/#global-impact-potential","title":"\ud83c\udf0d Global Impact Potential","text":"#### \ud83c\udfaf **Your Contributions to Global Challenges**   <p>\ud83c\udfd7\ufe0f **Sustainable Development Goals (SDGs) Impact:**</p> <ul> <li>**SDG 11:** Sustainable Cities and Communities - Urban planning support</li> <li>**SDG 13:** Climate Action - Urban heat and resilience analysis</li> <li>**SDG 1:** No Poverty - Informal settlement identification and improvement</li> <li>**SDG 3:** Good Health - Air quality and urban health assessments</li> <li>**SDG 9:** Industry and Infrastructure - Smart infrastructure planning</li> </ul> <p>\ud83c\udf31 **Environmental Benefits:**</p> <ul> <li>Reduced urban sprawl through better density planning</li> <li>Optimized energy efficiency in urban design</li> <li>Enhanced climate resilience through data-driven planning</li> <li>Improved green space integration and urban heat mitigation</li> </ul>"},{"location":"conclusion/#next-steps-continuing-your-journey","title":"\ud83d\ude80 Next Steps: Continuing Your Journey","text":""},{"location":"conclusion/#immediate-action-items","title":"\ud83d\udcc8 Immediate Action Items","text":"\ud83c\udfaf **Week 1: Apply Your Skills** <ul> <li>\ud83d\udccd Choose a city or region you're interested in</li> <li>\ud83d\udef0\ufe0f Extract building height data using your preferred method</li> <li>\ud83d\uddfa\ufe0f Create your first professional visualization</li> <li>\ud83d\udcca Analyze building patterns and document findings</li> </ul> \ud83d\udcda **Month 1: Expand Knowledge** <ul> <li>\ud83d\udd17 Join Google Earth Engine and GIS communities</li> <li>\ud83d\udcd6 Read additional research papers on urban analysis</li> <li>\ud83d\udee0\ufe0f Experiment with advanced visualization techniques</li> <li>\ud83d\udcbb Contribute to open-source GIS projects</li> </ul> \ud83c\udfd7\ufe0f **Ongoing: Build Portfolio** <ul> <li>\ud83c\udfa8 Create a portfolio of urban analysis projects</li> <li>\ud83d\udcdd Write blog posts or case studies about your work</li> <li>\ud83c\udfa4 Present findings at conferences or meetups</li> <li>\ud83e\udd1d Collaborate with urban planners and researchers</li> </ul>"},{"location":"conclusion/#advanced-skill-development","title":"\ud83d\udd2e Advanced Skill Development","text":"#### \ud83c\udf93 **Specialized Learning Paths**   \ud83e\udd16 **AI/Machine Learning Integration** <p>**Next Steps:**</p> <ul> <li>Learn computer vision techniques for building detection</li> <li>Explore deep learning applications in urban analysis</li> <li>Study automated change detection algorithms</li> <li>Apply ML to predict urban growth patterns</li> </ul> <p>\ud83c\udfaf Goal: Become a specialist in AI-powered urban analytics</p> \ud83c\udf10 **Web Development &amp; Dashboards** <p>**Next Steps:**</p> <ul> <li>Master JavaScript libraries like Leaflet, D3.js, Three.js</li> <li>Build interactive web applications for urban data</li> <li>Create real-time dashboards for city management</li> <li>Develop mobile applications for field data collection</li> </ul> <p>\ud83c\udfaf Goal: Create comprehensive urban analytics platforms</p> \ud83c\udfdb\ufe0f **Policy &amp; Governance Applications** <p>**Next Steps:**</p> <ul> <li>Study urban policy frameworks and regulations</li> <li>Learn about participatory planning methodologies</li> <li>Understand data privacy and ethics in urban analytics</li> <li>Engage with government agencies and NGOs</li> </ul> <p>\ud83c\udfaf Goal: Bridge technology and urban governance</p>"},{"location":"conclusion/#remember-key-success-principles","title":"\ud83d\udca1 Remember: Key Success Principles","text":"### \ud83c\udfc6 **Excellence Principles to Follow**    **1. \ud83c\udfaf **Always Validate Your Data**** - Cross-reference with local knowledge and other datasets - Consider temporal and spatial limitations of the data - Apply appropriate quality filters and confidence thresholds - Document your validation process and assumptions  **2. \ud83d\udcca **Design for Your Audience**** - Tailor visualizations to your stakeholders' needs and expertise - Choose color schemes that are accessible and meaningful - Provide clear legends, scales, and context - Test your outputs with representative users  **3. \ud83d\udd04 **Embrace Continuous Learning**** - Stay updated with new dataset versions and improvements - Follow research developments in urban analytics - Experiment with new tools and methodologies - Share your learnings with the community  **4. \ud83e\udd1d **Collaborate and Share**** - Engage with multidisciplinary teams (planners, architects, policymakers) - Share your methods and findings openly when possible - Contribute to data quality improvements and validation efforts - Support capacity building in underserved communities"},{"location":"conclusion/#final-thoughts-your-urban-analytics-journey","title":"\ud83c\udf1f Final Thoughts: Your Urban Analytics Journey","text":"### \ud83d\ude80 **The Future is Bright**  You've embarked on an exciting journey at the intersection of **technology**, **data science**, and **urban development**. The skills you've gained through this comprehensive tutorial represent more than just technical capabilities\u2014they're tools for creating positive change in how we understand, plan, and manage our cities.   \ud83c\udf0d **Your Impact Awaits** <p>The Google Open Buildings 2.5D Temporal dataset represents one of the most comprehensive building height resources ever created. By mastering its use, you're now positioned to:</p> <ul> <li>**\ud83c\udfd7\ufe0f Shape Urban Futures:** Your analyses can inform decisions that affect millions of urban residents</li> <li>**\ud83d\udea8 Enhance Safety:** Your emergency planning work can save lives and reduce disaster impacts</li> <li>**\ud83c\udf31 Support Sustainability:** Your climate and environmental studies can guide green city initiatives</li> <li>**\u2696\ufe0f Promote Equity:** Your informal settlement mapping can support inclusive urban development</li> <li>**\ud83d\udca1 Drive Innovation:** Your technical skills can pioneer new approaches to urban challenges</li> </ul>   ### \ud83c\udfaf **A Personal Message**  As you continue to apply these skills, remember that every building represented in this dataset corresponds to real people, real communities, and real lives. Your work has the potential to improve housing conditions, enhance safety, support economic development, and create more livable cities for everyone.  The **combination of cutting-edge technology with human-centered applications** makes urban analytics one of the most impactful fields you can contribute to. Whether you're supporting local planning decisions, contributing to global research, or developing innovative solutions, your work matters."},{"location":"conclusion/#stay-connected-keep-contributing","title":"\ud83d\udcec Stay Connected &amp; Keep Contributing\ud83c\udf89 **Congratulations!** \ud83c\udf89","text":"### \ud83e\udd1d **Join the Community of Practice**   <p>\ud83d\udce7 **Share Your Success Stories:**</p> <p>When you create something amazing with building height data, share it with the community! Contact the Google Open Buildings team at:</p> <p>open-buildings-dataset@google.com</p> <p>\ud83c\udf1f **Help Improve the Dataset:**</p> <ul> <li>Report data quality issues you discover</li> <li>Share validation studies and accuracy assessments</li> <li>Contribute to methodology improvements</li> <li>Suggest new features or applications</li> </ul> <p>You are now a Building Heights Extraction Expert!</p> <p>Armed with cutting-edge skills in urban data analysis, you're ready to make a meaningful impact on the future of our cities.</p> <p>\ud83d\ude80 **Go forth and build better cities with data!** \ud83c\udfd9\ufe0f</p>"},{"location":"conclusion/#quick-start-reminder","title":"\ud83c\udfaf Quick Start Reminder","text":"<p>Ready to begin? Start with: 1. \ud83d\udef0\ufe0f Google Earth Engine Method for powerful cloud processing 2. \ud83d\udc0d Python Method for automated workflows 3. \ud83c\udf10 Web Explorer for quick exploration</p> <p>Need help? Check our Troubleshooting Guide or explore Additional Resources for continued learning.</p> <p>Thank you for completing this comprehensive guide. The future of urban analytics is in capable hands\u2014yours! \ud83c\udf1f</p>"},{"location":"dataset-overview/","title":"\ud83d\uddc2\ufe0f Dataset Overview","text":"\ud83d\udce1 Google Open Buildings 2.5D Temporal Dataset <p>Revolutionary building height data covering 8 years of temporal analysis</p>"},{"location":"dataset-overview/#key-features","title":"\ud83c\udf0d Key Features","text":"\ud83c\udf0f Coverage <p>~58 million km\u00b2</p> <ul> <li>\ud83c\udf0d Africa</li> <li>\ud83c\udfdb\ufe0f South Asia</li> <li>\ud83c\udfdd\ufe0f Southeast Asia</li> <li>\ud83c\udfd6\ufe0f Latin America</li> <li>\ud83c\udf0a Caribbean</li> </ul> \u23f0 Temporal Range <p>2016-2023</p> <p>Annual snapshots providing historical building height evolution</p> \ud83d\udccf Resolution <p>Effective 4m</p> <p>Provided at 0.5m for maximum detail</p>"},{"location":"dataset-overview/#data-bands-explained","title":"\ud83d\udcca Data Bands Explained","text":"### \ud83c\udfd7\ufe0f **building_presence**  <p>Range: 0-1 (probability)</p> <p>Purpose: Indicates the likelihood of building presence at each pixel</p> <p>Tip: Use threshold &gt; 0.5 for reliable building detection</p>   ### \ud83d\udcd0 **building_height**  <p>Range: 0-100 meters</p> <p>Purpose: Height in meters above terrain</p> <p>Tip: Values represent building height, not elevation above sea level</p>   ### \ud83d\udd22 **building_fractional_count**  <p>Range: 0-N (fractional count)</p> <p>Purpose: Fractional building count per pixel</p> <p>Tip: Useful for density analysis and urban planning</p>"},{"location":"dataset-overview/#important-limitations","title":"\u26a0\ufe0f Important Limitations","text":"\ud83d\udea8 Regional Availability <p>Not available for North America, Europe, or Australia (these regions have LIDAR data coverage)</p> \u23f3 Temporal Instability <p>Same building may have different heights across years due to processing variations</p> \ud83d\udccd Spatial Misalignment <p>Buildings may appear to shift between years due to satellite imagery differences</p> \u2601\ufe0f Model Confidence <p>Varies by location and cloud cover conditions</p>"},{"location":"dataset-overview/#data-quality-indicators","title":"\ud83d\udcc8 Data Quality Indicators","text":"Factor Impact Recommendation Cloud Cover \ud83d\udd34 High impact Choose years with minimal clouds Urban Density \ud83d\udfe1 Medium impact Higher accuracy in dense areas Building Size \ud83d\udfe2 Low impact Better detection for larger buildings Terrain Complexity \ud83d\udfe1 Medium impact Flat areas more accurate \ud83c\udfaf Ready to Extract Building Heights? <p>Choose your preferred method and start analyzing urban landscapes!</p>"},{"location":"introduction/","title":"\ud83c\udfd9\ufe0f Introduction","text":"\ud83d\ude80 Welcome to Building Heights Extraction <p>Unlock the power of Google's Open Buildings 2.5D Temporal dataset for urban analysis and planning</p> <p>Google's Open Buildings 2.5D Temporal dataset is a groundbreaking resource that provides annual building presence, counts, and height data from 2016-2023. This comprehensive tutorial will guide you through multiple methods to access and visualize this data, with a focus on extracting building heights for use in QGIS and other GIS applications.</p> <p></p> <p></p>"},{"location":"introduction/#what-youll-learn","title":"\ud83c\udfaf What You'll Learn","text":"\ud83d\udcca Data Extraction <p>Extract building height rasters and vector data with precision and accuracy</p> \ud83d\uddfb DSM Creation <p>Create Digital Surface Models (DSM) for comprehensive terrain analysis</p> \ud83c\udfe2 Data Integration <p>Combine building footprints with height data for detailed urban mapping</p> \ud83d\udcf1 3D Visualization <p>Visualize 2.5D buildings in QGIS with stunning 3D representations</p> \ud83d\udc41\ufe0f Analysis Tools <p>Perform visibility analysis and urban planning applications</p> \ud83c\udf1f Ready to get started? <p>Choose from three powerful extraction methods and transform your urban analysis workflow!</p>"},{"location":"introduction/#quick-navigation","title":"\ud83d\udd17 Quick Navigation","text":"Method Difficulty Best For \ud83d\udef0\ufe0f Google Earth Engine \u2b50\u2b50\u2b50 Large-scale processing \ud83d\udc0d Python Direct Download \u2b50\u2b50 Automated workflows \ud83c\udf10 Web Explorer \u2b50 Quick exploration"},{"location":"method-1-gee/","title":"\u2699\ufe0f Method 1: Google Earth Engine","text":""},{"location":"method-1-gee/#recommended","title":"\ud83c\udfc6 (Recommended)\ud83d\udef0\ufe0f Most Powerful Method","text":"<p>Perfect for processing large areas and combining with other datasets</p> <p></p>"},{"location":"method-1-gee/#prerequisites","title":"\ud83d\ude80 Prerequisites","text":"### \u2705 **Step-by-Step Setup**  1. **\ud83d\udd10 Sign up for Google Earth Engine**    - Visit: [https://earthengine.google.com/signup/](https://earthengine.google.com/signup/)    - Wait for approval (usually 1-2 days)  2. **\ud83d\udcbb Access the Code Editor**    - Go to: [https://code.earthengine.google.com/](https://code.earthengine.google.com/)"},{"location":"method-1-gee/#step-1-extract-building-height-raster","title":"\ud83c\udfaf Step 1: Extract Building Height Raster","text":"[![Open in Google Earth Engine](assets/gee_icon.jpg)](https://code.earthengine.google.com/f90adbd664b59f53dfcaa4530da436c3)"},{"location":"method-1-gee/#complete-script","title":"\ud83d\udcdd Complete Script","text":"<pre><code>// \ud83c\udfaf Define your area of interest\n// Draw a polygon using the drawing tools or use this example\nvar geometry = ee.Geometry.Rectangle([\n  [longitude_min, latitude_min],\n  [longitude_max, latitude_max]\n]);\n\n// \ud83d\udce1 Load the Open Buildings 2.5D Temporal dataset\nvar openBuildingsTemporal = ee.ImageCollection(\n  'GOOGLE/Research/open-buildings-temporal/v1');\n\n// \ud83d\udcc5 Select year of interest\nvar year = 2023;\nvar startDate = ee.Date.fromYMD(year, 1, 1);\nvar endDate = startDate.advance(1, 'year');\n\n// \ud83d\udd0d Filter collection\nvar filtered = openBuildingsTemporal\n  .filter(ee.Filter.date(startDate, endDate))\n  .filter(ee.Filter.bounds(geometry));\n\n// \ud83d\uddfa\ufe0f Get projection and create mosaic\nvar projection = filtered.first().projection();\nvar buildingsMosaic = filtered.mosaic()\n  .setDefaultProjection(projection);\n\n// \ud83c\udfd7\ufe0f Select building height band\nvar buildingHeights = buildingsMosaic\n  .select('building_height');\n\n// \ud83c\udfa8 Visualize with beautiful colors\nvar heightPalette = [\n  '1d4877', '1b8a5a', 'fbb021', 'f68838', 'ee3e32'];\nvar heightVisParams = {min:0, max:50, palette: heightPalette};\n\nMap.centerObject(geometry);\nMap.addLayer(buildingHeights.clip(geometry),\n  heightVisParams, 'Building Heights');\n\n// \ud83d\udcbe Export as GeoTIFF\nExport.image.toDrive({\n  image: buildingHeights.clip(geometry),\n  description: 'Building_Height_Raster_' + year,\n  folder: 'earthengine',\n  fileNamePrefix: 'building_height_raster_' + year,\n  region: geometry,\n  scale: 4  // 4m resolution\n});\n</code></pre>"},{"location":"method-1-gee/#step-2-create-digital-surface-model-dsm","title":"\ud83d\uddfb Step 2: Create Digital Surface Model (DSM)","text":"[![Open DSM Script](assets/gee_icon.jpg)](https://code.earthengine.google.com/f90adbd664b59f53dfcaa4530da436c3)"},{"location":"method-1-gee/#advanced-dsm-with-trees-and-terrain","title":"\ud83c\udf33 Advanced DSM with Trees and Terrain","text":"<pre><code>// \ud83c\udf32 Add Canopy Height (Meta/WRI 1m resolution)\nvar canopyHeight = ee.ImageCollection(\n  'projects/meta-forest-monitoring-okw37/assets/CanopyHeight')\n  .mosaic()\n  .rename('canopy_height');\n\nvar treeMask = canopyHeight.updateMask(canopyHeight.gte(1));\nvar treeHeight = treeMask.unmask(0);\n\n// \ud83c\udfe2 Add tree height to building height\nvar buildingsAndTrees = buildingHeights.add(treeHeight);\n\n// \u26f0\ufe0f Add Terrain Height (FABDEM 30m)\nvar fabdem = ee.ImageCollection(\n  'projects/sat-io/open-datasets/FABDEM');\nvar fabdemMosaic = fabdem.mosaic()\n  .setDefaultProjection(projection);\nvar dem = fabdemMosaic.select('b1');\n\n// \ud83c\udfaf Create complete DSM\nvar dsm = buildingsAndTrees.add(dem);\n\n// \ud83d\udcbe Export DSM\nExport.image.toDrive({\n  image: dsm.clip(geometry),\n  description: 'DSM_' + year,\n  folder: 'earthengine',\n  fileNamePrefix: 'dsm_' + year,\n  region: geometry,\n  scale: 4\n});\n</code></pre>"},{"location":"method-1-gee/#step-3-extract-building-footprints-with-heights","title":"\ud83c\udfe2 Step 3: Extract Building Footprints with Heights","text":"[![Open Footprints Script](assets/gee_icon.jpg)](https://code.earthengine.google.com/f90adbd664b59f53dfcaa4530da436c3)"},{"location":"method-1-gee/#extract-polygon-data-with-height-attributes","title":"\ud83d\udcd0 Extract Polygon Data with Height Attributes","text":"<pre><code>// \ud83c\udfd8\ufe0f Load Open Buildings V3 Polygons\nvar openBuildingsPolygons = ee.FeatureCollection(\n  'GOOGLE/Research/open-buildings/v3/polygons');\n\nvar allBuildings = openBuildingsPolygons\n  .filter(ee.Filter.bounds(geometry));\n\n// \ud83d\udcca Extract temporal data for each building\nvar temporalBands = buildingsMosaic.select([\n  'building_presence', 'building_height']);\n\n// \ud83d\udcc8 Zonal statistics to get average height per building\nvar allBuildingsData = temporalBands.reduceRegions({\n  collection: allBuildings,\n  reducer: ee.Reducer.mean(),\n  scale: 4,\n  tileScale: 16,\n});\n\n// \ud83d\udd0d Filter buildings present in selected year\nvar buildingsFiltered = allBuildingsData\n  .filter(ee.Filter.gt('building_presence', 0.5));\n\n// \ud83d\uddfa\ufe0f Reproject to UTM for accuracy\nvar buildingsReprojected = buildingsFiltered\n  .map(function(f) {\n    return f.transform({\n      proj: projection,\n      maxError: 0.1});\n  });\n\n// \ud83d\udccb Select properties for export\nvar selectedProperties = ['area_in_meters', 'building_height'];\nvar renamedProperties = ['area', 'height'];\n\nvar buildingsExport = buildingsReprojected.select(\n  selectedProperties, renamedProperties);\n\n// \ud83d\udcbe Export as shapefile\nExport.table.toDrive({\n  collection: buildingsExport,\n  description: 'Building_Polygons_with_Height_' + year,\n  folder: 'earthengine',\n  fileNamePrefix: 'building_polygons_with_height_' + year,\n  fileFormat: 'SHP',\n  selectors: renamedProperties\n});\n</code></pre>"},{"location":"method-1-gee/#visualization-tips","title":"\ud83c\udfa8 Visualization Tips","text":"\ud83c\udfa8 Color Palettes <p>Height Visualization:</p> <code>['1d4877', '1b8a5a', 'fbb021', 'f68838', 'ee3e32']</code> \ud83d\udccf Scale Settings <ul> <li>Testing: scale: 16</li> <li>Production: scale: 4</li> <li>High Detail: scale: 2</li> </ul>"},{"location":"method-1-gee/#performance-optimization","title":"\u26a1 Performance Optimization","text":"Setting Value Purpose tileScale 16 Reduces memory usage maxPixels 1e9 Prevents timeout errors pyramidingPolicy 'mean' Smooth visualization \ud83c\udf89 Congratulations! <p>You've mastered the most powerful method for extracting building heights!</p>"},{"location":"method-2-python/","title":"\ud83d\udc0d Method 2: Direct Download via Python","text":"\ud83d\ude80 Perfect for Automated Workflows <p>Ideal for users without Earth Engine access - download pre-processed country-level data</p>"},{"location":"method-2-python/#prerequisites-installation","title":"\ud83d\udce6 Prerequisites &amp; Installation","text":"### \ud83d\udee0\ufe0f **Required Libraries**  <pre><code># \ud83d\udcbb Install required packages\npip install google-cloud-storage geopandas rasterio matplotlib numpy\n</code></pre> \ud83d\udca1 Pro Tip <p>Create a virtual environment to avoid conflicts:</p> <code>python -m venv building_heights_env</code>"},{"location":"method-2-python/#step-1-download-country-data","title":"\ud83d\udce5 Step 1: Download Country Data","text":""},{"location":"method-2-python/#complete-download-script","title":"\ud83c\udf0d Complete Download Script","text":"<pre><code>import os\nimport requests\nimport zipfile\nimport geopandas as gpd\nimport rasterio\nfrom rasterio.plot import show\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef download_country_data(country_code, year, output_dir):\n    \"\"\"\n    \ud83c\udf0d Download Open Buildings 2.5D data for a specific country and year\n\n    Parameters:\n    -----------\n    country_code : str\n        ISO 3-letter country code (e.g., 'GHA' for Ghana)\n    year : int\n        Year between 2016-2023\n    output_dir : str\n        Directory to save downloaded files\n\n    Returns:\n    --------\n    str: Path to downloaded GeoTIFF file\n    \"\"\"\n\n    # \ud83d\udcc1 Create output directory\n    os.makedirs(output_dir, exist_ok=True)\n\n    # \ud83d\udd17 Construct GCS path\n    base_url = \"gs://open-buildings-temporal/v1\"\n    gcs_path = f\"{base_url}/{country_code}_{year}.tif\"\n\n    # \ud83d\udce5 Download using gsutil (requires Google Cloud SDK)\n    print(f\"\ud83d\udce5 Downloading {country_code} data for {year}...\")\n    os.system(f\"gsutil cp {gcs_path} {output_dir}/\")\n\n    downloaded_file = f\"{output_dir}/{country_code}_{year}.tif\"\n\n    if os.path.exists(downloaded_file):\n        print(f\"\u2705 Successfully downloaded: {downloaded_file}\")\n        return downloaded_file\n    else:\n        print(f\"\u274c Download failed for {country_code}_{year}\")\n        return None\n</code></pre>"},{"location":"method-2-python/#alternative-hdx-portal-method","title":"\ud83d\uddc2\ufe0f Alternative: HDX Portal Method","text":"\ud83d\udccb Manual Download Steps  1. **\ud83c\udf10 Visit HDX Portal**: [https://data.humdata.org/dataset/google-open-buildings-temporal](https://data.humdata.org/dataset/google-open-buildings-temporal)  2. **\ud83d\udcc4 Download Resources**:    - Country list CSV    - Download script    - Documentation  3. **\ud83d\udd27 Setup Google Cloud SDK**:    <pre><code># Install Google Cloud SDK\ncurl https://sdk.cloud.google.com | bash\ngcloud auth login\n</code></pre>"},{"location":"method-2-python/#step-2-process-downloaded-data","title":"\ud83d\udd04 Step 2: Process Downloaded Data","text":""},{"location":"method-2-python/#extract-building-heights-function","title":"\ud83d\udcca Extract Building Heights Function","text":"<pre><code>def extract_building_heights(tif_path, confidence_threshold=0.5):\n    \"\"\"\n    \ud83c\udfd7\ufe0f Extract building heights from downloaded GeoTIFF\n\n    Parameters:\n    -----------\n    tif_path : str\n        Path to the downloaded GeoTIFF file\n    confidence_threshold : float\n        Minimum confidence for building presence (0-1)\n\n    Returns:\n    --------\n    tuple: (height_array, metadata_profile)\n    \"\"\"\n\n    print(f\"\ud83d\udcd6 Processing: {tif_path}\")\n\n    with rasterio.open(tif_path) as src:\n        # \ud83d\udcca Read all bands\n        presence = src.read(1)  # Band 1: building_presence\n        height = src.read(2)    # Band 2: building_height  \n        count = src.read(3)     # Band 3: building_fractional_count\n\n        # \ud83c\udfaf Apply confidence mask\n        height_masked = np.where(presence &gt; confidence_threshold, height, np.nan)\n\n        # \ud83d\udccb Get metadata\n        metadata = {\n            'crs': src.crs,\n            'bounds': src.bounds,\n            'resolution': src.res,\n            'height': src.height,\n            'width': src.width,\n            'transform': src.transform\n        }\n\n        print(f\"\ud83d\udccd CRS: {metadata['crs']}\")\n        print(f\"\ud83c\udf0d Bounds: {metadata['bounds']}\")\n        print(f\"\ud83d\udccf Resolution: {metadata['resolution']}\")\n        print(f\"\ud83d\udcd0 Dimensions: {metadata['height']} x {metadata['width']}\")\n\n        # \ud83d\udcc8 Basic statistics\n        valid_heights = height_masked[~np.isnan(height_masked)]\n        if len(valid_heights) &gt; 0:\n            print(f\"\ud83d\udcca Height Statistics:\")\n            print(f\"   Min: {valid_heights.min():.2f}m\")\n            print(f\"   Max: {valid_heights.max():.2f}m\")\n            print(f\"   Mean: {valid_heights.mean():.2f}m\")\n            print(f\"   Buildings detected: {len(valid_heights):,} pixels\")\n\n        return height_masked, metadata, src.profile\n</code></pre>"},{"location":"method-2-python/#step-3-visualization-functions","title":"\ud83c\udfa8 Step 3: Visualization Functions","text":""},{"location":"method-2-python/#advanced-visualization-script","title":"\ud83d\udcc8 Advanced Visualization Script","text":"<pre><code>def create_height_visualization(height_array, metadata, country_code, year):\n    \"\"\"\n    \ud83c\udfa8 Create stunning building height visualizations\n\n    Parameters:\n    -----------\n    height_array : numpy.ndarray\n        Array of building heights\n    metadata : dict\n        Spatial metadata from rasterio\n    country_code : str\n        Country code for title\n    year : int\n        Year for title\n    \"\"\"\n\n    # \ud83c\udfa8 Set up the plot style\n    plt.style.use('dark_background')\n    fig, axes = plt.subplots(2, 2, figsize=(16, 12))\n    fig.suptitle(f'\ud83c\udfd9\ufe0f Building Heights Analysis: {country_code} {year}', \n                 fontsize=20, fontweight='bold', color='white')\n\n    # \ud83d\udcca Main height visualization\n    ax1 = axes[0, 0]\n    im1 = ax1.imshow(height_array, cmap='viridis', vmin=0, vmax=50, aspect='auto')\n    ax1.set_title('\ud83c\udfd7\ufe0f Building Heights', fontsize=14, color='white')\n    ax1.set_xlabel('Longitude \u2192', color='white')\n    ax1.set_ylabel('Latitude \u2191', color='white')\n    plt.colorbar(im1, ax=ax1, label='Height (m)')\n\n    # \ud83d\udd25 Heat map style\n    ax2 = axes[0, 1]\n    im2 = ax2.imshow(height_array, cmap='hot', vmin=0, vmax=30, aspect='auto')\n    ax2.set_title('\ud83d\udd25 Heat Map Style', fontsize=14, color='white')\n    ax2.set_xlabel('Longitude \u2192', color='white')\n    ax2.set_ylabel('Latitude \u2191', color='white')\n    plt.colorbar(im2, ax=ax2, label='Height (m)')\n\n    # \ud83d\udcc8 Height histogram\n    ax3 = axes[1, 0]\n    valid_heights = height_array[~np.isnan(height_array)]\n    if len(valid_heights) &gt; 0:\n        ax3.hist(valid_heights, bins=50, color='#00ff7f', alpha=0.7, edgecolor='white')\n        ax3.set_title('\ud83d\udcca Height Distribution', fontsize=14, color='white')\n        ax3.set_xlabel('Height (m)', color='white')\n        ax3.set_ylabel('Frequency', color='white')\n        ax3.tick_params(colors='white')\n\n    # \ud83c\udfe2 Building categories\n    ax4 = axes[1, 1]\n    if len(valid_heights) &gt; 0:\n        categories = ['Low (0-5m)', 'Mid (5-15m)', 'High (15-30m)', 'Very High (30m+)']\n        counts = [\n            np.sum((valid_heights &gt;= 0) &amp; (valid_heights &lt; 5)),\n            np.sum((valid_heights &gt;= 5) &amp; (valid_heights &lt; 15)),\n            np.sum((valid_heights &gt;= 15) &amp; (valid_heights &lt; 30)),\n            np.sum(valid_heights &gt;= 30)\n        ]\n        colors = ['#4CAF50', '#FF9800', '#F44336', '#9C27B0']\n\n        wedges, texts, autotexts = ax4.pie(counts, labels=categories, colors=colors, \n                                          autopct='%1.1f%%', startangle=90)\n        ax4.set_title('\ud83c\udfe2 Building Categories', fontsize=14, color='white')\n\n        # Style the text\n        for text in texts:\n            text.set_color('white')\n        for autotext in autotexts:\n            autotext.set_color('white')\n            autotext.set_fontweight('bold')\n\n    plt.tight_layout()\n    plt.savefig(f'building_heights_{country_code}_{year}.png', \n                dpi=300, bbox_inches='tight', facecolor='black')\n    plt.show()\n\ndef export_processed_data(height_array, metadata, output_path):\n    \"\"\"\n    \ud83d\udcbe Export processed height data as GeoTIFF\n\n    Parameters:\n    -----------\n    height_array : numpy.ndarray\n        Processed height array\n    metadata : dict\n        Spatial metadata\n    output_path : str\n        Output file path\n    \"\"\"\n\n    profile = {\n        'driver': 'GTiff',\n        'dtype': 'float32',\n        'nodata': np.nan,\n        'width': metadata['width'],\n        'height': metadata['height'],\n        'count': 1,\n        'crs': metadata['crs'],\n        'transform': metadata['transform'],\n        'compress': 'lzw'\n    }\n\n    with rasterio.open(output_path, 'w', **profile) as dst:\n        dst.write(height_array.astype('float32'), 1)\n\n    print(f\"\ud83d\udcbe Exported processed data to: {output_path}\")\n</code></pre>"},{"location":"method-2-python/#complete-usage-example","title":"\ud83d\ude80 Complete Usage Example","text":"<pre><code># \ud83c\udf0d Configuration\ncountry_code = \"GHA\"  # Ghana\nyear = 2023\noutput_dir = \"./open_buildings_data\"\n\n# \ud83d\udce5 Download data\nprint(\"\ud83d\ude80 Starting building heights extraction...\")\ntif_path = download_country_data(country_code, year, output_dir)\n\nif tif_path:\n    # \ud83d\udd04 Process the data\n    heights, metadata, profile = extract_building_heights(tif_path, confidence_threshold=0.6)\n\n    # \ud83c\udfa8 Create visualizations\n    create_height_visualization(heights, metadata, country_code, year)\n\n    # \ud83d\udcbe Export processed data\n    export_path = f\"{output_dir}/processed_heights_{country_code}_{year}.tif\"\n    export_processed_data(heights, metadata, export_path)\n\n    print(\"\u2705 Processing complete! Check the output directory for results.\")\nelse:\n    print(\"\u274c Failed to download data. Please check your internet connection and try again.\")\n</code></pre>"},{"location":"method-2-python/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":"\ud83d\udea8 Common Issues <ul> <li>gsutil not found: Install Google Cloud SDK</li> <li>Permission denied: Run <code>gcloud auth login</code></li> <li>Large memory usage: Process smaller regions or reduce resolution</li> </ul> \ud83d\udca1 Pro Tips <ul> <li>Batch processing: Loop through multiple countries/years</li> <li>Memory optimization: Use chunked processing for large files</li> <li>Quality control: Always check confidence thresholds</li> </ul> \ud83c\udf89 Python Method Mastered! <p>You can now automate building height extraction for entire countries!</p>"},{"location":"method-3-web-explorer/","title":"\ud83c\udf10 Method 3: Using the Web Explorer","text":"\u26a1 Quick &amp; Easy Exploration <p>Perfect for quick exploration without any coding - instant access through your web browser!</p>"},{"location":"method-3-web-explorer/#perfect-for","title":"\ud83c\udfaf Perfect For","text":"\ud83d\udd0d Quick Exploration <p>Rapid site assessment and initial data exploration</p> \ud83c\udf93 Teaching &amp; Learning <p>Demonstrate concepts without technical setup</p> \ud83d\udcf1 No Installation <p>Works directly in your browser - no downloads needed</p>"},{"location":"method-3-web-explorer/#step-1-access-the-interactive-explorer","title":"\ud83d\ude80 Step 1: Access the Interactive Explorer","text":"\ud83c\udf0d Official Interactive Explorer <p>Primary Link:</p>     \ud83d\udd17 https://mmeka-ee.projects.earthengine.app/view/open-buildings-temporal-dataset  <p>Alternative (if performance issues):</p> <p>Use the Earth Engine Code Editor with direct scripts</p>"},{"location":"method-3-web-explorer/#step-2-navigate-the-interface","title":"\ud83d\uddfa\ufe0f Step 2: Navigate the Interface","text":""},{"location":"method-3-web-explorer/#main-controls","title":"\ud83c\udfae Main Controls","text":"#### \ud83d\udd0d **Search &amp; Navigation**   1. **\ud83c\udf0d Find Your Area**    - Use the search box to find your area of interest    - Type city names, coordinates, or landmarks    - Examples: `\"Accra, Ghana\"`, `\"Lagos, Nigeria\"`, `\"Bangkok, Thailand\"`  2. **\ud83c\udfaf Zoom Controls**    - Use mouse wheel or `+/-` buttons to zoom    - Optimal viewing: Zoom level 14-18    - Building details visible at higher zoom levels    #### \ud83d\udcc5 **Temporal Controls**   1. **\u23f0 Year Slider**    - Toggle between years **2016-2023**    - Watch urban development over time    - Compare building heights across years  2. **\ud83d\udd04 Animation Mode**    - Some versions support temporal animation    - See building growth patterns    - Identify urban expansion areas    #### \ud83c\udfa8 **Visualization Bands**  Band Purpose Color Scheme \ud83c\udfd7\ufe0f Building Height Height in meters Blue \u2192 Green \u2192 Yellow \u2192 Red \ud83c\udfaf Building Presence Confidence level Black \u2192 White \ud83d\udd22 Building Count Density per pixel Purple \u2192 Yellow"},{"location":"method-3-web-explorer/#step-3-inspect-and-analyze-data","title":"\ud83d\udcca Step 3: Inspect and Analyze Data","text":""},{"location":"method-3-web-explorer/#point-analysis","title":"\ud83c\udfaf Point Analysis","text":"#### \ud83d\udccc **Click to Inspect** 1. **\ud83d\uddb1\ufe0f Single Click**: Get pixel values instantly 2. **\ud83d\udcca Information Panel**: Shows exact height values 3. **\ud83d\udccd Coordinates**: Displays lat/lon coordinates   \ud83d\udca1 Sample Output <pre>\n\ud83d\udccd Location: [-1.5432, 5.6234]\n\ud83c\udfd7\ufe0f Building Height: 12.5m\n\ud83c\udfaf Confidence: 0.87\n\ud83d\udd22 Fractional Count: 1.2\n\ud83d\udcc5 Year: 2023\n</pre>"},{"location":"method-3-web-explorer/#area-selection","title":"\ud83d\uddbc\ufe0f Area Selection","text":"#### \u270f\ufe0f **Drawing Tools** 1. **\ud83d\udcd0 Rectangle Tool**: Select rectangular areas 2. **\u270d\ufe0f Polygon Tool**: Custom shape selection 3. **\ud83d\udcca Statistics Panel**: View area statistics   \ud83d\udcc8 Area Statistics Example <pre>\n\ud83d\udcd0 Selected Area: 2.3 km\u00b2\n\ud83c\udfd7\ufe0f Average Height: 8.7m\n\ud83d\udcca Max Height: 45.2m\n\ud83c\udfe2 Building Pixels: 15,432\n\ud83d\udccd Coordinates: [...]\n</pre>"},{"location":"method-3-web-explorer/#step-4-advanced-exploration-techniques","title":"\ud83c\udfa8 Step 4: Advanced Exploration Techniques","text":""},{"location":"method-3-web-explorer/#comparative-analysis","title":"\ud83d\udd0d Comparative Analysis","text":"\u23f0 Temporal Comparison <ol> <li>Select same area</li> <li>Toggle between years</li> <li>Note height changes</li> <li>Identify new construction</li> </ol> \ud83c\udf0d Regional Analysis <ol> <li>Compare city centers</li> <li>Analyze suburban areas</li> <li>Study informal settlements</li> <li>Examine commercial districts</li> </ol>"},{"location":"method-3-web-explorer/#documentation-export","title":"\ud83d\udcf8 Documentation &amp; Export","text":"#### \ud83d\udccb **Best Practices for Documentation**  1. **\ud83d\udcf7 Screenshots**    - Capture different visualization modes    - Include legends and scale bars    - Document coordinates and zoom levels  2. **\ud83d\udcdd Note Taking**    <pre><code>\ud83d\udccd Location: City Center, Accra\n\ud83d\udcc5 Date Analyzed: 2023\n\ud83d\udd0d Zoom Level: 16\n\ud83c\udfaf Key Findings:\n- Average building height: 8.2m\n- Tallest structure: 32m (coordinates: ...)\n- Development pattern: Dense urban core\n</code></pre>  3. **\ud83d\udd04 Comparative Documentation**    - Before/after comparisons    - Multiple year analysis    - Different band visualizations"},{"location":"method-3-web-explorer/#use-case-examples","title":"\ud83c\udfaf Use Case Examples","text":""},{"location":"method-3-web-explorer/#urban-planning-assessment","title":"\ud83c\udfd9\ufe0f Urban Planning Assessment","text":"**Scenario:** Planning new infrastructure in Lagos, Nigeria  1. **\ud83d\udd0d Initial Survey**    - Navigate to Lagos city center    - Switch to Building Height visualization    - Identify high-density areas  2. **\ud83d\udcca Height Analysis**    - Click on various buildings    - Document height patterns    - Note development trends  3. **\u23f0 Temporal Analysis**    - Compare 2019 vs 2023    - Identify rapid development zones    - Plan for future growth"},{"location":"method-3-web-explorer/#emergency-response-planning","title":"\ud83d\udea8 Emergency Response Planning","text":"**Scenario:** Flood evacuation planning in Dhaka, Bangladesh  1. **\ud83c\udf0d Area Assessment**    - Map low-lying urban areas    - Identify multi-story buildings    - Note building density patterns  2. **\ud83c\udfd7\ufe0f Evacuation Points**    - Find tallest buildings (&gt;15m)    - Check building distribution    - Plan evacuation routes  3. **\ud83d\udccb Documentation**    - Screenshot key areas    - Record building coordinates    - Export area statistics"},{"location":"method-3-web-explorer/#performance-tips","title":"\u26a1 Performance Tips","text":"\ud83d\ude80 Speed Optimization <ul> <li>Use Chrome or Firefox for best performance</li> <li>Close other browser tabs</li> <li>Start at lower zoom levels</li> </ul> \u26a0\ufe0f Limitations <ul> <li>No data export functionality</li> <li>Limited to visual inspection</li> <li>Depends on internet connection</li> </ul> \ud83d\udca1 Best Practices <ul> <li>Take systematic screenshots</li> <li>Document coordinates</li> <li>Compare multiple years</li> </ul> \ud83c\udf89 Web Explorer Mastered! <p>You can now explore building heights across the globe instantly!</p>"},{"location":"qgis/","title":"\ud83d\uddfa\ufe0f Working with Data in QGIS","text":"\ud83c\udfaf Transform Your Building Height Data <p>Create stunning 2.5D and 3D visualizations with professional GIS capabilities</p>"},{"location":"qgis/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"### \ud83d\udcbb **Software Requirements**   \ud83d\udd27 QGIS Installation <p>Recommended Version: QGIS 3.16 or later</p> <p>Download: https://qgis.org/en/site/forusers/download.html</p>   ### \ud83d\udcc1 **Required Data Files** - `building_height_raster_2023.tif` (from Earth Engine or Python) - `building_polygons_with_height_2023.shp` (building footprints) - `dsm_2023.tif` (Digital Surface Model - optional)"},{"location":"qgis/#step-1-loading-height-raster-in-qgis","title":"\ud83d\udcca Step 1: Loading Height Raster in QGIS","text":""},{"location":"qgis/#import-your-data","title":"\ud83d\uddc2\ufe0f Import Your Data","text":"#### \ud83d\udce5 **Method 1: Drag &amp; Drop** 1. **\ud83d\uddb1\ufe0f Simple Import**: Drag and drop your `building_height_raster_2023.tif` into QGIS 2. **\u2705 Automatic Recognition**: QGIS automatically detects the coordinate system  #### \ud83d\udce5 **Method 2: Menu Import** 1. **\ud83d\udcc2 Layer Menu**: `Layer \u2192 Add Layer \u2192 Add Raster Layer` 2. **\ud83d\udd0d Browse**: Navigate to your GeoTIFF file 3. **\ud83d\udd17 Add**: Click \"Add\" to import"},{"location":"qgis/#style-the-height-data","title":"\ud83c\udfa8 Style the Height Data","text":"#### \ud83d\udd8c\ufe0f **Styling Steps** 1. **\u2699\ufe0f Open Properties**: Right-click layer \u2192 Properties \u2192 Symbology 2. **\ud83c\udfa8 Render Type**: Change to \"Singleband pseudocolor\" 3. **\ud83c\udf08 Configure Colors**:  <pre><code>\ud83d\udcca Styling Configuration:\n\u251c\u2500\u2500 \ud83c\udfa8 Color ramp: Viridis or Spectral\n\u251c\u2500\u2500 \ud83d\udccf Min value: 0\n\u251c\u2500\u2500 \ud83d\udccf Max value: 50 (adjust based on your area)\n\u251c\u2500\u2500 \ud83d\udcca Mode: Equal Interval or Quantile  \n\u251c\u2500\u2500 \ud83d\udd22 Classes: 10\n\u2514\u2500\u2500 \ud83c\udfaf Interpolation: Linear\n</code></pre> \ud83c\udfa8 Recommended Color Schemes  | Purpose | Color Ramp | Description | |---------|------------|-------------| | **\ud83d\udcca General Analysis** | Viridis | Blue \u2192 Green \u2192 Yellow | | **\ud83d\udd25 Heat Map Style** | Hot | Black \u2192 Red \u2192 Yellow | | **\ud83c\udf0a Topographic** | Spectral | Blue \u2192 Green \u2192 Red | | **\ud83c\udfaf High Contrast** | RdYlBu | Red \u2192 Yellow \u2192 Blue |"},{"location":"qgis/#step-2-loading-building-polygons-with-heights","title":"\ud83c\udfe2 Step 2: Loading Building Polygons with Heights","text":""},{"location":"qgis/#import-vector-data","title":"\ud83d\udcd0 Import Vector Data","text":"#### \ud83d\udce5 **Load Shapefile** 1. **\ud83d\uddb1\ufe0f Drag &amp; Drop**: Import `building_polygons_with_height_2023.shp` 2. **\u2705 Verify Import**: Check that all associated files (.shx, .dbf, .prj) are present  #### \ud83d\udccb **Inspect Attributes** 1. **\ud83d\udcca Open Table**: Right-click \u2192 Open Attribute Table 2. **\ud83d\udd0d Find Heights**: Look for the 'height' column with building heights in meters 3. **\ud83d\udcc8 Data Quality**: Check for NULL values or unrealistic heights"},{"location":"qgis/#create-25d-visualization","title":"\ud83c\udfad Create 2.5D Visualization","text":"#### \u2728 **2.5D Renderer Setup**  1. **\u2699\ufe0f Layer Properties**: Right-click layer \u2192 Properties \u2192 Symbology 2. **\ud83d\udd04 Change Renderer**: Switch from \"Single Symbol\" to **\"2.5D\"** 3. **\ud83d\udcd0 Configure Settings**:  <pre><code>\ud83c\udfd7\ufe0f 2.5D Configuration:\n\u251c\u2500\u2500 \ud83d\udccf Height: Click \u03b5 button \u2192 Field type \u2192 Select \"height\"\n\u251c\u2500\u2500 \ud83d\udd04 Angle: 135 degrees (optimal viewing angle)\n\u251c\u2500\u2500 \ud83c\udfe0 Roof Color: #b3b3b3 (light gray)\n\u251c\u2500\u2500 \ud83e\uddf1 Wall Color: #787878 (dark gray)  \n\u251c\u2500\u2500 \ud83d\udca1 Wall Shading: Enabled\n\u2514\u2500\u2500 \ud83d\udcca Height Scale: 1.0 (adjust if needed)\n</code></pre>"},{"location":"qgis/#advanced-styling-options","title":"\ud83c\udf08 Advanced Styling Options","text":"\ud83c\udfa8 Color by Height <p>Gradient Colors:</p> <ul> <li>0-5m: \ud83d\udfe2 #4CAF50 (Green)</li> <li>5-15m: \ud83d\udfe1 #FFEB3B (Yellow)</li> <li>15-30m: \ud83d\udfe0 #FF9800 (Orange)</li> <li>30m+: \ud83d\udd34 #F44336 (Red)</li> </ul> \u26a1 Performance Tips <ul> <li>Simplify geometries for large datasets</li> <li>Use scale-dependent rendering</li> <li>Create spatial index for faster loading</li> <li>Limit features in dense areas</li> </ul>"},{"location":"qgis/#step-3-creating-3d-views","title":"\ud83c\udf1f Step 3: Creating 3D Views","text":""},{"location":"qgis/#install-qgis2threejs-plugin","title":"\ud83d\udd0c Install Qgis2threejs Plugin","text":"#### \ud83d\udce6 **Plugin Installation** 1. **\ud83d\udd0c Plugin Manager**: `Plugins \u2192 Manage and Install Plugins` 2. **\ud83d\udd0d Search**: Type \"Qgis2threejs\"  3. **\u2b07\ufe0f Install**: Click \"Install Plugin\" 4. **\ud83d\udd04 Restart**: Restart QGIS to activate   \u26a0\ufe0f Alternative Plugins <ul> <li>Qgis2threejs: Web-based 3D visualization</li> <li>3D Map View: Built-in QGIS 3D (QGIS 3.0+)</li> <li>DEMto3D: 3D printing preparation</li> </ul>"},{"location":"qgis/#create-3d-scene","title":"\ud83c\udfac Create 3D Scene","text":"#### \ud83c\udfd7\ufe0f **3D Scene Configuration**  1. **\ud83d\ude80 Launch Tool**: `Web \u2192 Qgis2threejs \u2192 Qgis2threejs Exporter`  2. **\ud83c\udfd4\ufe0f DEM Layer Setup**:    - Select your DSM or terrain layer as base    - Set appropriate vertical exaggeration (1-3x)    - Choose texture from satellite imagery  3. **\ud83c\udfe2 Building Layer Setup**:    - Add your building polygon layer    - Enable height extrusion using \"height\" field    - Configure building materials and colors  4. **\u2699\ufe0f Scene Settings**:    <pre><code>\ud83c\udfac 3D Scene Configuration:\n\u251c\u2500\u2500 \ud83d\udcd0 Vertical Exaggeration: 1.5x\n\u251c\u2500\u2500 \ud83c\udfa8 Background: Sky gradient\n\u251c\u2500\u2500 \u2600\ufe0f Lighting: Natural (sun position)\n\u251c\u2500\u2500 \ud83d\udcf7 Camera: Perspective view\n\u2514\u2500\u2500 \ud83c\udfaf Controls: Orbit navigation\n</code></pre>"},{"location":"qgis/#export-options","title":"\ud83d\udce4 Export Options","text":"\ud83c\udf10 Web Export <ul> <li>Interactive HTML file</li> <li>Share via web browser</li> <li>Mobile-friendly viewing</li> <li>Embed in websites</li> </ul> \ud83d\udcf1 Scene Export <ul> <li>GLB/GLTF format</li> <li>Use in AR/VR applications</li> <li>3D printing preparation</li> <li>Game engine import</li> </ul>"},{"location":"qgis/#troubleshooting-common-issues","title":"\ud83d\udee0\ufe0f Troubleshooting Common Issues","text":"\ud83d\udea8 Buildings appear stretched in 2.5D view <p>Solutions:</p> <ul> <li>Ensure data is in projected coordinate system (UTM)</li> <li>Check height field units (should be meters)</li> <li>Adjust vertical exaggeration factor in symbology</li> <li>Verify CRS matches across all layers</li> </ul> \u26a0\ufe0f Missing height values <p>Solutions:</p> <ul> <li>Filter buildings by `building_presence &gt; 0.5`</li> <li>Check for NULL values in attribute table</li> <li>Use Field Calculator: <code>COALESCE(\"height\", 5)</code> for default values</li> <li>Verify data export settings from source</li> </ul> \u26a1 Performance issues with large datasets <p>Solutions:</p> <ul> <li>Simplify geometries: Vector \u2192 Geometry Tools \u2192 Simplify</li> <li>Create spatial index: Vector \u2192 Data Management \u2192 Create Spatial Index</li> <li>Use scale-dependent rendering</li> <li>Enable on-the-fly CRS transformation only when necessary</li> </ul>"},{"location":"qgis/#best-practices-summary","title":"\ud83c\udfaf Best Practices Summary","text":"### \u2705 **Data Management** - Keep all data in the same coordinate system (preferably UTM) - Create backup copies before processing - Use descriptive layer names and organize in groups - Document data sources and processing steps  ### \ud83c\udfa8 **Visualization** - Choose color schemes appropriate for your audience - Use consistent symbolization across similar datasets - Include legends and scale bars in map outputs - Test visibility at different zoom levels  ### \u26a1 **Performance** - Enable pyramids for large rasters - Use appropriate scale ranges for different layer details - Optimize styling for your computer's capabilities - Save projects regularly to prevent data loss   \ud83c\udf89 QGIS Mastery Complete! <p>You can now create professional building height visualizations and analyses!</p>"},{"location":"resources/","title":"\ud83d\udcda Additional Resources","text":"\ud83c\udf1f Comprehensive Resource Library <p>Expand your expertise with curated resources, tools, and learning materials for building height analysis</p>"},{"location":"resources/#official-documentation-research","title":"\ud83d\udcd6 Official Documentation &amp; Research","text":""},{"location":"resources/#academic-technical-papers","title":"\ud83c\udf93 Academic &amp; Technical Papers","text":"\ud83d\udcc4 Primary Research Paper <p>\ud83d\udd2c \"Open Buildings 2.5D Temporal Dataset\"</p> <p>\ud83d\udccd arXiv: https://arxiv.org/html/2310.11622v2</p> <p>\ud83d\udcca Key Topics: Methodology, validation, temporal analysis, data quality assessment</p> <p>\ud83c\udfaf Best for: Understanding dataset creation process, accuracy metrics, limitations</p> \ud83d\udef0\ufe0f Google Earth Engine Documentation <p>\ud83c\udf0d Earth Engine Catalog Entry:</p> <p>Google Research Open Buildings Temporal v1</p> <p>\ud83d\udcda Includes: Band descriptions, code examples, data format specifications</p> <p>\ud83d\udd27 Technical specs: Projection details, resolution, temporal coverage</p> \ud83d\udcca Dataset Statistics &amp; Validation Metric Value Source Total Coverage ~58 million km\u00b2 Official paper Height Accuracy (MAE) \u00b13.5 meters Validation study Temporal Consistency 85% buildings stable Multi-year analysis"},{"location":"resources/#software-tools-platforms","title":"\ud83d\udee0\ufe0f Software Tools &amp; Platforms","text":""},{"location":"resources/#interactive-explorers-viewers","title":"\ud83c\udf0d Interactive Explorers &amp; Viewers","text":"\ud83c\udf10 Official Interactive Explorer <p>\ud83d\udd17 Link: Earth Engine App</p> <p>\u2728 Features:</p> <ul> <li>\ud83c\udfaf Interactive mapping interface</li> <li>\u23f0 Temporal slider (2016-2023)</li> <li>\ud83c\udfa8 Multiple visualization modes</li> <li>\ud83d\udcca Point-and-click data inspection</li> </ul> <p>\ud83c\udfaf Best for: Quick exploration, teaching, presentations</p> \ud83d\udcbb Google Earth Engine Code Editor <p>\ud83d\udd17 Link: code.earthengine.google.com</p> <p>\u26a1 Complete Script Collection: Full GEE Script</p> <p>\ud83d\udee0\ufe0f Capabilities:</p> <ul> <li>\ud83d\udd27 Advanced processing workflows</li> <li>\ud83d\udcca Statistical analysis</li> <li>\ud83d\udcbe Data export functionality</li> <li>\ud83c\udf0d Large-scale processing</li> </ul>"},{"location":"resources/#python-libraries-tools","title":"\ud83d\udc0d Python Libraries &amp; Tools","text":"#### \ud83d\udce6 **Essential Python Packages**  <pre><code># \ud83c\udfd7\ufe0f Core geospatial processing\npip install geopandas rasterio shapely fiona\n\n# \ud83d\udcca Data analysis and visualization  \npip install pandas numpy matplotlib seaborn plotly\n\n# \u2601\ufe0f Google Cloud integration\npip install google-cloud-storage earthengine-api\n\n# \ud83d\uddfa\ufe0f Advanced GIS operations\npip install pyproj folium contextily\n\n# \u26a1 Performance optimization\npip install dask geopandas-dask rtree\n\n# \ud83d\udcc8 Machine learning (optional)\npip install scikit-learn xgboost lightgbm\n\n# \ud83d\udccb Complete installation command:\npip install geopandas rasterio matplotlib google-cloud-storage earthengine-api plotly folium dask\n</code></pre>  #### \ud83d\udd27 **Specialized Tools**   \ud83d\udee0\ufe0f Tool \ud83d\udcca Purpose \ud83d\udd27 Installation \ud83c\udfaf Use Case \ud83c\udf0d GDAL/OGR Format conversion, reprojection <code>conda install gdal</code> Data preprocessing \ud83d\ude80 Dask Parallel processing <code>pip install dask[complete]</code> Large dataset processing \ud83d\udcca PostGIS Spatial database operations Database installation Enterprise workflows \ud83c\udfa8 Kepler.gl Interactive visualization <code>pip install keplergl</code> Web-based exploration"},{"location":"resources/#desktop-gis-software","title":"\ud83d\uddfa\ufe0f Desktop GIS Software","text":"\ud83c\udd93 QGIS (Recommended) <p>\ud83d\udd17 Download: qgis.org</p> <p>\u2705 Pros:</p> <ul> <li>Free and open-source</li> <li>Extensive plugin ecosystem</li> <li>Strong 3D visualization support</li> <li>Python integration</li> </ul> <p>\ud83d\udd0c Key Plugins: Qgis2threejs, 3D Map View, DataPlotly</p> \ud83d\udcbc ArcGIS Pro <p>\ud83c\udfe2 Commercial Solution</p> <p>\u2705 Pros:</p> <ul> <li>Professional workflows</li> <li>Advanced 3D capabilities</li> <li>Enterprise integration</li> <li>Comprehensive toolsets</li> </ul> <p>\ud83d\udca1 Note: Requires license, good for institutional use</p> \ud83c\udf1f Other Options <ul> <li>\ud83d\udcca R + sf: Statistical analysis focused</li> <li>\ud83d\udc0d Python + Jupyter: Programmatic workflows</li> <li>\ud83c\udf10 Leaflet: Web mapping applications</li> <li>\ud83c\udfaf Deck.gl: High-performance visualization</li> </ul>"},{"location":"resources/#data-download-access","title":"\ud83c\udf10 Data Download &amp; Access","text":""},{"location":"resources/#official-data-sources","title":"\ud83d\udce5 Official Data Sources","text":"#### \ud83d\uddc4\ufe0f **Primary Data Repositories**   \ud83c\udf0d Humanitarian Data Exchange (HDX) <p>\ud83d\udd17 Link: HDX Open Buildings Portal</p> <p>\ud83d\udccb Available Resources:</p> <ul> <li>\ud83d\udcc4 Country-specific download lists</li> <li>\ud83d\udc0d Python download scripts</li> <li>\ud83d\udcca Data quality reports</li> <li>\ud83d\udcdd Methodology documentation</li> </ul> <p>\ud83c\udfaf Format: Country-level GeoTIFF files via Google Cloud Storage</p> \u2601\ufe0f Google Cloud Storage (Direct) <p>\ud83d\udcc1 Bucket: <code>gs://open-buildings-temporal/v1/</code></p> <p>\ud83d\uddc2\ufe0f Structure: <code>{COUNTRY_CODE}_{YEAR}.tif</code></p> <p>\ud83d\udccb Example Files:</p> <ul> <li><code>GHA_2023.tif</code> - Ghana 2023 data</li> <li><code>NGA_2022.tif</code> - Nigeria 2022 data</li> <li><code>IDN_2021.tif</code> - Indonesia 2021 data</li> </ul>"},{"location":"resources/#alternative-complementary-datasets","title":"\ud83d\udd17 Alternative &amp; Complementary Datasets","text":"#### \ud83c\udfe2 **Building Footprint Data**   \ud83d\uddc2\ufe0f Dataset \ud83d\udccd Coverage \ud83d\udd17 Access \ud83c\udfaf Compatibility \ud83c\udfd7\ufe0f Google Open Buildings V3 Global South Google Earth Engine \u2705 Perfect match \ud83d\uddfa\ufe0f OpenStreetMap Buildings Global Overpass API, Planet OSM \ud83d\udfe1 Good for validation \ud83c\udfe2 Microsoft Building Footprints US, Global expansion GitHub releases \ud83d\udfe1 Limited overlap \ud83d\udcca Local Cadastral Data Country-specific Government portals \u2705 High accuracy"},{"location":"resources/#learning-resources-tutorials","title":"\ud83c\udf93 Learning Resources &amp; Tutorials","text":""},{"location":"resources/#video-tutorials-courses","title":"\ud83d\udcf9 Video Tutorials &amp; Courses","text":"\ud83c\udfac YouTube Channels <ul> <li>\ud83c\udf0d Google Earth Engine: Official tutorials and webinars</li> <li>\ud83d\uddfa\ufe0f QGIS Official: Software tutorials and new features</li> <li>\ud83d\udcca Geospatial Python: Programming tutorials for GIS</li> <li>\ud83c\udfd9\ufe0f Urban Analytics: City planning applications</li> </ul> <p>\ud83d\udd0d Search terms: \"Google Open Buildings\", \"Building height analysis\", \"Urban GIS\"</p> \ud83d\udcda Online Courses <ul> <li>\ud83c\udf93 Coursera: GIS and Remote Sensing specializations</li> <li>\ud83d\udcd6 edX: Urban planning and smart cities courses</li> <li>\ud83d\udcbb Udemy: Python for GIS, QGIS mastery courses</li> <li>\ud83c\udf10 Google Earth Engine: Official training programs</li> </ul> <p>\ud83d\udca1 Tip: Look for courses combining remote sensing with urban analysis</p>"},{"location":"resources/#books-publications","title":"\ud83d\udcd6 Books &amp; Publications","text":"#### \ud83d\udcda **Recommended Reading**   \ud83c\udfd9\ufe0f Urban Analysis &amp; Planning <ul> <li>\"Geographic Information Systems and Science\" - Longley et al.</li> <li>\"Urban Analytics\" - Alex Singleton</li> <li>\"The Smart Enough City\" - Ben Green</li> <li>\"Happy City: Transforming Our Lives Through Urban Design\" - Charles Montgomery</li> </ul> \ud83d\udef0\ufe0f Remote Sensing &amp; GIS <ul> <li>\"Python for Geospatial Data Analysis\" - Bonny McClain</li> <li>\"Google Earth Engine Applications\" - Lalit Kumar (Editor)</li> <li>\"QGIS for Hydrological Applications\" - Kurt Menke (applicable methods)</li> <li>\"Spatial Analysis and Modeling in Geographical Transformation Process\"</li> </ul> \ud83d\udcca Data Science &amp; Visualization <ul> <li>\"Data Visualization: A Handbook for Data Driven Design\" - Andy Kirk</li> <li>\"Python for Data Analysis\" - Wes McKinney</li> <li>\"Interactive Data Visualization for the Web\" - Scott Murray</li> <li>\"The Visual Display of Quantitative Information\" - Edward R. Tufte</li> </ul>"},{"location":"resources/#community-support","title":"\ud83d\udcac Community &amp; Support","text":""},{"location":"resources/#forums-discussion-groups","title":"\ud83c\udf0d Forums &amp; Discussion Groups","text":"\ud83d\udcbb Technical Communities <ul> <li>\ud83c\udf0d Google Earth Engine Community: Developers Group</li> <li>\ud83d\uddfa\ufe0f QGIS Community: Official forums and user groups</li> <li>\ud83d\udc0d Python GIS: Reddit r/gis, Stack Overflow</li> <li>\ud83d\udcca Open Data Communities: GitHub, OpenStreetMap forums</li> </ul> \ud83c\udfd9\ufe0f Urban Planning Networks <ul> <li>\ud83c\udfd7\ufe0f Urban Analytics Network: Research collaborations</li> <li>\ud83c\udf06 Smart Cities Forums: Implementation experiences</li> <li>\ud83d\udcca Data for Cities: Municipal data sharing</li> <li>\ud83c\udf93 Academic Networks: University research groups</li> </ul> \ud83d\ude80 Project Collaboration <ul> <li>\ud83d\udcc2 GitHub Organizations: Open source GIS projects</li> <li>\ud83d\udca1 Kaggle: Data science competitions and datasets</li> <li>\ud83c\udf10 OpenStreetMap: Collaborative mapping projects</li> <li>\ud83c\udfe2 Professional Networks: LinkedIn GIS groups</li> </ul>"},{"location":"resources/#contact-support-channels","title":"\ud83d\udce7 Contact &amp; Support Channels","text":"#### \ud83d\udcec **Official Support Contacts**   <p>\ud83d\udce7 Google Open Buildings Team:</p> <p>open-buildings-dataset@google.com</p> <p>\ud83d\udcac Use for: Dataset questions, bug reports, collaboration inquiries</p> <p>\ud83c\udf0d Earth Engine Support:</p> <p>Official Help Center</p> <p>\ud83d\udcac Use for: Technical issues, API questions, processing problems</p>"},{"location":"resources/#research-development","title":"\ud83d\udd2c Research &amp; Development","text":""},{"location":"resources/#cutting-edge-research-areas","title":"\ud83e\uddea Cutting-Edge Research Areas","text":"\ud83d\udd2c Research Domain \ud83c\udfaf Current Focus \ud83d\ude80 Future Directions \ud83e\udd16 AI/ML Integration Automated building detection Real-time change detection \ud83c\udf21\ufe0f Climate Modeling Urban heat island effects Climate adaptation planning \ud83d\udcf1 IoT Integration Sensor network optimization Smart city orchestration \ud83d\udc65 Social Applications Population estimation Inequality measurement"},{"location":"resources/#future-dataset-enhancements","title":"\ud83d\udd2e Future Dataset Enhancements","text":"#### \ud83d\ude80 **Anticipated Improvements**   \ud83d\udcc8 Temporal Resolution <ul> <li>Monthly or quarterly updates</li> <li>Real-time change alerts</li> <li>Construction progress tracking</li> </ul> \ud83c\udf0d Spatial Coverage <ul> <li>Global coverage expansion</li> <li>Higher resolution data</li> <li>Rural area inclusion</li> </ul> \ud83d\udcca Additional Attributes <ul> <li>Building materials detection</li> <li>Age estimation</li> <li>Usage classification</li> </ul>"},{"location":"resources/#quick-reference-links","title":"\ud83d\udd17 Quick Reference Links","text":"### \u26a1 **Essential Bookmarks**   \ud83d\udcca Data Access <ul> <li>\ud83c\udf10 Interactive Explorer</li> <li>\ud83d\udcbb Earth Engine Code Editor</li> <li>\ud83d\udcc4 HDX Data Portal</li> </ul> \ud83d\udcda Documentation <ul> <li>\ud83d\udcd6 Research Paper</li> <li>\ud83d\udee0\ufe0f GEE Catalog</li> <li>\ud83c\udf93 GEE Tutorials</li> </ul> \ud83d\udee0\ufe0f Software <ul> <li>\ud83d\uddfa\ufe0f QGIS Download</li> <li>\ud83d\udc0d GeoPandas Install</li> <li>\u2601\ufe0f Google Cloud SDK</li> </ul> \ud83d\udcac Community <ul> <li>\ud83d\udc65 GEE Community</li> <li>\ud83d\udcbb GitHub Projects</li> <li>\ud83d\udce7 Contact Team</li> </ul> \ud83d\udcda Resource Master Achieved! <p>You now have access to a comprehensive library of resources for continued learning and development!</p>"},{"location":"troubleshooting/","title":"\ud83d\udee0\ufe0f Troubleshooting &amp; Tips","text":"\ud83d\udd27 Master Problem-Solving Guide <p>Overcome common challenges and optimize your building height extraction workflow</p>"},{"location":"troubleshooting/#common-issues-and-solutions","title":"\ud83d\udea8 Common Issues and Solutions","text":""},{"location":"troubleshooting/#building-visualization-problems","title":"\ud83c\udfd7\ufe0f Building Visualization Problems","text":"#### \u26a0\ufe0f **Buildings appear stretched or distorted in 2.5D view**   \ud83c\udfaf Root Causes <ul> <li>Coordinate System Issues: Data in geographic (lat/lon) instead of projected coordinates</li> <li>Height Unit Mismatch: Heights in feet instead of meters</li> <li>Scale Factor Problems: Vertical exaggeration set incorrectly</li> <li>CRS Inconsistency: Layers using different coordinate reference systems</li> </ul> \u2705 Solutions  **\ud83d\uddfa\ufe0f Fix Coordinate System:** <pre><code>-- In QGIS, reproject to local UTM zone\nProject \u2192 Properties \u2192 CRS \u2192 Search for \"UTM Zone [XX]N\"\n-- Example for Ghana: EPSG:32630 (UTM Zone 30N)\n</code></pre>  **\ud83d\udccf Verify Height Units:** <pre><code># Check height statistics in Python console\nlayer = iface.activeLayer()\nheights = [f['height'] for f in layer.getFeatures() if f['height'] is not None]\nprint(f\"Min height: {min(heights):.2f}\")\nprint(f\"Max height: {max(heights):.2f}\")\nprint(f\"Average height: {sum(heights)/len(heights):.2f}\")\n# Typical residential buildings: 3-15m\n# If values are 10-50, might be in feet\n</code></pre>  **\u2699\ufe0f Adjust Vertical Scale:** - In 2.5D symbology, set height scale factor to 0.3048 if data is in feet - For dramatic effect, use scale factor 2-3x - For realistic view, use scale factor 1.0x"},{"location":"troubleshooting/#data-quality-issues","title":"\ud83d\udcca Data Quality Issues","text":"#### \u26a0\ufe0f **Missing or NULL height values**   \ud83d\udd0d Diagnosis Steps  1. **\ud83d\udcca Check Attribute Table:**    <pre><code>Right-click layer \u2192 Open Attribute Table\nLook for NULL, 0, or negative values in height column\n</code></pre>  2. **\ud83c\udfaf Verify Building Presence:**    <pre><code>-- Filter by confidence in Field Calculator\n\"building_presence\" &gt; 0.5 AND \"height\" IS NOT NULL\n</code></pre>  3. **\ud83d\udcc8 Statistical Analysis:**    <pre><code># Python console analysis\nlayer = iface.activeLayer()\ntotal_features = layer.featureCount()\nvalid_heights = sum(1 for f in layer.getFeatures() \n                   if f['height'] is not None and f['height'] &gt; 0)\nprint(f\"Valid heights: {valid_heights}/{total_features} \"\n      f\"({valid_heights/total_features*100:.1f}%)\")\n</code></pre> \ud83d\udee0\ufe0f Fix Strategies  **\ud83d\udd27 Method 1: Default Value Assignment** <pre><code>-- In Field Calculator, create new field 'height_clean'\nCOALESCE(\"height\", 5)  -- Use 5m default for NULL values\n</code></pre>  **\ud83d\udd27 Method 2: Conditional Defaults** <pre><code>CASE \n    WHEN \"height\" IS NULL OR \"height\" &lt;= 0 THEN \n        CASE \n            WHEN \"area\" &gt; 200 THEN 8    -- Large building = 8m\n            WHEN \"area\" &gt; 100 THEN 6    -- Medium building = 6m  \n            ELSE 4                      -- Small building = 4m\n        END\n    ELSE \"height\"\nEND\n</code></pre>  **\ud83d\udd27 Method 3: Spatial Interpolation** <pre><code># Use nearby buildings to estimate height\n# Processing Toolbox \u2192 Interpolation \u2192 IDW Interpolation\n# Input: Buildings with valid heights\n# Output: Height surface for estimation\n</code></pre>"},{"location":"troubleshooting/#earth-engine-and-download-issues","title":"\ud83c\udf0d Earth Engine and Download Issues","text":"#### \u26a0\ufe0f **Google Earth Engine timeout or memory errors**   \ud83d\udeab Common Error Messages <ul> <li><code>User memory limit exceeded</code></li> <li><code>Computation timed out</code></li> <li><code>Too many concurrent aggregations</code></li> <li><code>Image.reduceRegions: Tile error</code></li> </ul> \ud83d\udca1 Optimization Solutions  **\ud83c\udfaf Reduce Processing Scale:** <pre><code>// Instead of scale: 4, try larger values\nExport.image.toDrive({\n  image: buildingHeights.clip(geometry),\n  scale: 8,        // or 16 for testing\n  maxPixels: 1e9,  // Increase pixel limit\n  tileScale: 16    // Reduce memory per tile\n});\n</code></pre>  **\ud83d\udcd0 Process Smaller Areas:** <pre><code>// Split large areas into smaller chunks\nvar bounds = geometry.bounds();\nvar xSize = bounds.coordinates().get(0).get(2).get(0)\n             .subtract(bounds.coordinates().get(0).get(0).get(0));\nvar ySize = bounds.coordinates().get(0).get(2).get(1)\n             .subtract(bounds.coordinates().get(0).get(0).get(1));\n\n// Create grid of smaller areas\nvar gridSize = 0.01; // Degrees\n// Process each grid cell separately\n</code></pre>  **\u26a1 Use Pyramid Policy:** <pre><code>var buildingHeights = buildingsMosaic\n  .select('building_height')\n  .setDefaultProjection('EPSG:4326', null, 4)\n  .pyramidingPolicy('mean');  // Smooth aggregation\n</code></pre>"},{"location":"troubleshooting/#python-download-and-processing-issues","title":"\ud83d\udc0d Python Download and Processing Issues","text":"#### \u26a0\ufe0f **gsutil authentication and download problems**   \ud83d\udd10 Authentication Issues  **Error:** `AccessDeniedException: 403 Forbidden`  **Solutions:** <pre><code># 1. Login with Google account\ngcloud auth login\n\n# 2. Set up application default credentials\ngcloud auth application-default login\n\n# 3. Check authentication status\ngcloud auth list\n\n# 4. Set active account if multiple accounts\ngcloud config set account your-email@gmail.com\n</code></pre>  **Error:** `gsutil: command not found`  **Solutions:** <pre><code># Install Google Cloud SDK\n# For Ubuntu/Debian:\ncurl https://sdk.cloud.google.com | bash\nexec -l $SHELL\n\n# For macOS:\nbrew install google-cloud-sdk\n\n# For Windows: Download installer from cloud.google.com\n</code></pre> \ud83d\udce6 Python Package Issues  **Error:** `ModuleNotFoundError: No module named 'rasterio'`  **Solutions:** <pre><code># Create isolated environment\npython -m venv building_env\nsource building_env/bin/activate  # Linux/Mac\n# OR\nbuilding_env\\Scripts\\activate     # Windows\n\n# Install with specific versions\npip install rasterio==1.3.8 geopandas==0.13.2\npip install google-cloud-storage matplotlib\n\n# Fix GDAL issues (common on Windows)\npip install GDAL --find-links https://www.lfd.uci.edu/~gohlke/pythonlibs/\n</code></pre>  **Memory Issues with Large Files:** <pre><code># Process in chunks for large rasters\nimport rasterio\nfrom rasterio.windows import Window\n\ndef process_large_raster_chunked(filepath, chunk_size=1000):\n    with rasterio.open(filepath) as src:\n        height, width = src.height, src.width\n\n        for row in range(0, height, chunk_size):\n            for col in range(0, width, chunk_size):\n                window = Window(col, row, \n                              min(chunk_size, width - col),\n                              min(chunk_size, height - row))\n\n                chunk = src.read(window=window)\n                # Process chunk here\n                yield chunk\n</code></pre>"},{"location":"troubleshooting/#performance-optimization","title":"\ud83d\udcca Performance Optimization","text":""},{"location":"troubleshooting/#qgis-performance-tuning","title":"\u26a1 QGIS Performance Tuning","text":"\ud83d\udda5\ufe0f System Settings <ul> <li>Memory: Settings \u2192 Options \u2192 System \u2192 Memory: Set to 75% of RAM</li> <li>CPU: Enable multi-threading in Processing settings</li> <li>Graphics: Enable OpenGL rendering in Advanced settings</li> <li>Cache: Increase tile cache size to 100-500MB</li> </ul> \ud83d\udcca Layer Optimization <ul> <li>Indexes: Create spatial indexes for vector layers</li> <li>Pyramids: Build overviews for large rasters</li> <li>Simplification: Use scale-dependent rendering</li> <li>Formats: Use GeoPackage instead of Shapefile</li> </ul>   #### \ud83d\udd27 **Performance Commands**  <pre><code>-- Create spatial index\nCREATE SPATIAL INDEX ON buildings_table USING GIST (geometry);\n\n-- Simplify complex geometries\nST_Simplify(geometry, 0.0001)  -- Adjust tolerance as needed\n\n-- Scale-dependent rendering expression\nCASE \n    WHEN @map_scale &gt; 10000 THEN 'simple_style'\n    ELSE 'detailed_style'\nEND\n</code></pre>"},{"location":"troubleshooting/#data-management-best-practices","title":"\ud83d\uddc4\ufe0f Data Management Best Practices","text":"#### \ud83d\udcc1 **File Organization**  <pre><code>\ud83d\udcc2 building_heights_project/\n\u251c\u2500\u2500 \ud83d\udcca data/\n\u2502   \u251c\u2500\u2500 \ud83d\udd22 raw/               # Original downloads\n\u2502   \u251c\u2500\u2500 \ud83d\udd04 processed/         # Cleaned data\n\u2502   \u2514\u2500\u2500 \ud83c\udfaf analysis/          # Analysis results\n\u251c\u2500\u2500 \ud83d\uddfa\ufe0f qgis_projects/        # QGIS project files\n\u251c\u2500\u2500 \ud83d\udcc8 outputs/              # Final maps and exports\n\u2502   \u251c\u2500\u2500 \ud83d\uddbc\ufe0f images/           # PNG, JPG exports\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 documents/        # PDF reports\n\u2502   \u2514\u2500\u2500 \ud83c\udf10 web/              # Web exports\n\u2514\u2500\u2500 \ud83d\udcdd documentation/        # Metadata and notes\n</code></pre>  #### \ud83d\udcbe **Storage Optimization**   File Type Best Format Compression Use Case \ud83c\udfe2 Vector Buildings GeoPackage (.gpkg) Built-in Analysis, storage \ud83d\udcca Height Rasters GeoTIFF (.tif) LZW or DEFLATE Analysis, visualization \ud83c\udf10 Web Sharing Shapefile (.shp) ZIP archive Compatibility \ud83d\udcf1 Web Maps MBTiles PNG tiles Online viewing"},{"location":"troubleshooting/#temporal-data-inconsistencies","title":"\ud83c\udf0d Temporal Data Inconsistencies","text":""},{"location":"troubleshooting/#handling-multi-year-variations","title":"\u23f0 Handling Multi-Year Variations","text":"#### \ud83d\udcca **Year Selection Strategy**  1. **\ud83c\udfaf Data Quality Assessment:**    <pre><code># Analyze data quality across years\nyears = [2019, 2020, 2021, 2022, 2023]\nquality_scores = {}\n\nfor year in years:\n    # Load data for each year\n    valid_buildings = count_valid_heights(year)\n    cloud_coverage = get_cloud_coverage(year)\n\n    # Calculate quality score\n    quality_scores[year] = valid_buildings * (1 - cloud_coverage)\n\nbest_year = max(quality_scores, key=quality_scores.get)\nprint(f\"Best data quality: {best_year}\")\n</code></pre>  2. **\ud83d\udd04 Multi-Year Averaging:**    <pre><code>-- Create averaged heights across multiple years\nSELECT \n    building_id,\n    AVG(height) as avg_height,\n    STDDEV(height) as height_variability,\n    COUNT(*) as year_count\nFROM building_temporal_data\nWHERE height IS NOT NULL AND building_presence &gt; 0.5\nGROUP BY building_id\nHAVING COUNT(*) &gt;= 3  -- At least 3 years of data\n</code></pre>"},{"location":"troubleshooting/#spatial-misalignment-fixes","title":"\ud83d\udcd0 Spatial Misalignment Fixes","text":"#### \ud83d\udd27 **Building Matching Across Years**  <pre><code># Python script for spatial matching\nimport geopandas as gpd\nfrom shapely.geometry import Point, Polygon\n\ndef match_buildings_across_years(buildings_2019, buildings_2023, tolerance=5):\n    \"\"\"\n    \ud83c\udfaf Match buildings across different years using spatial proximity\n    \"\"\"\n    matched_pairs = []\n\n    for idx_2023, building_2023 in buildings_2023.iterrows():\n        centroid_2023 = building_2023.geometry.centroid\n\n        # Find nearby buildings from 2019\n        distances = buildings_2019.geometry.centroid.distance(centroid_2023)\n        closest_idx = distances.idxmin()\n        closest_distance = distances.min()\n\n        if closest_distance &lt; tolerance:  # Within tolerance meters\n            matched_pairs.append({\n                'id_2019': closest_idx,\n                'id_2023': idx_2023,\n                'distance': closest_distance,\n                'height_2019': buildings_2019.loc[closest_idx, 'height'],\n                'height_2023': building_2023['height']\n            })\n\n    return pd.DataFrame(matched_pairs)\n</code></pre>"},{"location":"troubleshooting/#expert-tips-and-tricks","title":"\ud83c\udf93 Expert Tips and Tricks","text":""},{"location":"troubleshooting/#advanced-workflow-optimizations","title":"\ud83d\udca1 Advanced Workflow Optimizations","text":"\u26a1 Speed Hacks <ul> <li>\ud83c\udfaf Batch Processing: Process multiple countries simultaneously</li> <li>\ud83d\udd04 Automation: Use QGIS Model Builder for repeated tasks</li> <li>\ud83d\udcbe Caching: Save intermediate results to avoid recomputation</li> <li>\u2699\ufe0f Parallel Processing: Use multiprocessing for Python scripts</li> </ul> \ud83c\udfa8 Quality Improvements <ul> <li>\ud83d\udd0d Multi-Source Validation: Compare with OpenStreetMap data</li> <li>\ud83d\udcca Statistical Filtering: Remove outliers using IQR method</li> <li>\ud83c\udf0d Local Knowledge: Validate against known landmarks</li> <li>\ud83d\udcc8 Trend Analysis: Use temporal patterns for validation</li> </ul> \ud83d\udee0\ufe0f Tool Integration <ul> <li>\ud83d\uddfa\ufe0f QGIS + PostGIS: For large-scale database operations</li> <li>\ud83d\udc0d Python + R: Combine processing with statistical analysis</li> <li>\ud83c\udf10 Web Integration: Create online dashboards with Leaflet</li> <li>\ud83d\udcf1 Mobile Sync: Use QField for field validation</li> </ul>"},{"location":"troubleshooting/#debugging-checklist","title":"\ud83d\udd0d Debugging Checklist\ud83c\udf89 Troubleshooting Master!","text":"#### \u2705 **Pre-Processing Checklist**  - [ ] **\ud83d\udccd CRS Consistency:** All layers use same coordinate system - [ ] **\ud83d\udcca Data Validity:** No NULL or negative height values - [ ] **\ud83d\udccf Unit Verification:** Heights in meters, not feet - [ ] **\ud83c\udfaf Quality Filter:** Building presence &gt; 0.5 - [ ] **\ud83d\udcd0 Geometry Validity:** No invalid or self-intersecting polygons  #### \u2705 **Processing Checklist**  - [ ] **\ud83d\udcbe Sufficient Memory:** At least 8GB RAM for large areas - [ ] **\u23f0 Timeout Settings:** Increased for large exports - [ ] **\ud83d\udd27 Scale Appropriateness:** Balance between detail and performance - [ ] **\ud83d\udcca Output Validation:** Sample outputs match expectations - [ ] **\ud83d\uddc4\ufe0f Backup Strategy:** Save intermediate results  #### \u2705 **Post-Processing Checklist**  - [ ] **\ud83c\udfa8 Visualization Quality:** Colors and styles appropriate - [ ] **\ud83d\udcca Statistical Validation:** Heights within expected ranges - [ ] **\ud83d\uddfa\ufe0f Spatial Accuracy:** Buildings align with satellite imagery - [ ] **\ud83d\udcf1 Export Compatibility:** Files work in target applications - [ ] **\ud83d\udcdd Documentation:** Methods and parameters recorded   <p>You're now equipped to solve any building height extraction challenge!</p>"}]}